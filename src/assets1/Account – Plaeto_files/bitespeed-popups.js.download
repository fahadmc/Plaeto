console.log("Initiating bitespeed-popups v2.4.7-beta-v4");

// eslint-disable-next-line prettier/prettier
// prettier-ignore
const countryMappedTZ = [{"country":"Afghanistan","timezones":["Asia/Kabul"]},{"country":"Albania","timezones":["Europe/Tirane"]},{"country":"Algeria","timezones":["Africa/Algiers"]},{"country":"Argentina","timezones":["America/Argentina/Buenos_Aires","America/Argentina/Cordoba","America/Argentina/Salta","America/Argentina/Jujuy","America/Argentina/Tucuman","America/Argentina/Catamarca","America/Argentina/La_Rioja","America/Argentina/San_Juan","America/Argentina/Mendoza","America/Argentina/San_Luis","America/Argentina/Rio_Gallegos","America/Argentina/Ushuaia"]},{"country":"Armenia","timezones":["Asia/Yerevan"]},{"country":"Australia","timezones":["Australia/Lord_Howe","Antarctica/Macquarie","Australia/Hobart","Australia/Currie","Australia/Melbourne","Australia/Sydney","Australia/Broken_Hill","Australia/Brisbane","Australia/Lindeman","Australia/Adelaide","Australia/Darwin","Australia/Perth","Australia/Eucla"]},{"country":"Austria","timezones":["Europe/Vienna"]},{"country":"Azerbaijan","timezones":["Asia/Baku"]},{"country":"Bahrain","timezones":["Asia/Bahrain"]},{"country":"Bangladesh","timezones":["Asia/Dhaka"]},{"country":"Belarus","timezones":["Europe/Minsk"]},{"country":"Belgium","timezones":["Europe/Brussels"]},{"country":"Belize","timezones":["America/Belize"]},{"country":"Bhutan","timezones":["Asia/Thimphu"]},{"country":"Bolivia","timezones":["America/La_Paz"]},{"country":"Bosnia and Herzegovina","timezones":["Europe/Sarajevo"]},{"country":"Botswana","timezones":["Africa/Gaborone"]},{"country":"Brazil","timezones":["America/Noronha","America/Belem","America/Fortaleza","America/Recife","America/Araguaina","America/Maceio","America/Bahia","America/Sao_Paulo","America/Campo_Grande","America/Cuiaba","America/Santarem","America/Porto_Velho","America/Boa_Vista","America/Manaus","America/Eirunepe","America/Rio_Branco"]},{"country":"Brunei","timezones":["Asia/Brunei"]},{"country":"Bulgaria","timezones":["Europe/Sofia"]},{"country":"Cambodia","timezones":["Asia/Phnom_Penh"]},{"country":"Cameroon","timezones":["Africa/Douala"]},{"country":"Canada","timezones":["America/St_Johns","America/Halifax","America/Glace_Bay","America/Moncton","America/Goose_Bay","America/Blanc-Sablon","America/Toronto","America/Nipigon","America/Thunder_Bay","America/Iqaluit","America/Pangnirtung","America/Atikokan","America/Winnipeg","America/Rainy_River","America/Resolute","America/Rankin_Inlet","America/Regina","America/Swift_Current","America/Edmonton","America/Cambridge_Bay","America/Yellowknife","America/Inuvik","America/Creston","America/Dawson_Creek","America/Fort_Nelson","America/Vancouver","America/Whitehorse","America/Dawson"]},{"country":"Chile","timezones":["America/Santiago","Pacific/Easter"]},{"country":"China","timezones":["Asia/Shanghai","Asia/Urumqi"]},{"country":"Colombia","timezones":["America/Bogota"]},{"country":"Congo (DRC)","timezones":["Africa/Kinshasa","Africa/Lubumbashi"]},{"country":"Costa Rica","timezones":["America/Costa_Rica"]},{"country":"Côte d’Ivoire","timezones":["Africa/Abidjan"]},{"country":"Croatia","timezones":["Europe/Zagreb"]},{"country":"Cuba","timezones":["America/Havana"]},{"country":"Czech Republic","timezones":["Europe/Prague"]},{"country":"Denmark","timezones":["Europe/Copenhagen"]},{"country":"Djibouti","timezones":["Africa/Djibouti"]},{"country":"Dominican Republic","timezones":["America/Santo_Domingo"]},{"country":"Ecuador","timezones":["America/Guayaquil","Pacific/Galapagos"]},{"country":"Egypt","timezones":["Africa/Cairo"]},{"country":"El Salvador","timezones":["America/El_Salvador"]},{"country":"Eritrea","timezones":["Africa/Asmara"]},{"country":"Estonia","timezones":["Europe/Tallinn"]},{"country":"Ethiopia","timezones":["Africa/Addis_Ababa"]},{"country":"Faroe Islands","timezones":["Atlantic/Faroe"]},{"country":"Finland","timezones":["Europe/Helsinki"]},{"country":"France","timezones":["Europe/Paris"]},{"country":"Georgia","timezones":["Asia/Tbilisi"]},{"country":"Germany","timezones":["Europe/Berlin","Europe/Busingen"]},{"country":"Greece","timezones":["Europe/Athens"]},{"country":"Greenland","timezones":["America/Godthab","America/Danmarkshavn","America/Scoresbysund","America/Thule"]},{"country":"Guatemala","timezones":["America/Guatemala"]},{"country":"Haiti","timezones":["America/Port-au-Prince"]},{"country":"Honduras","timezones":["America/Tegucigalpa"]},{"country":"Hong Kong SAR","timezones":["Asia/Hong_Kong"]},{"country":"Hungary","timezones":["Europe/Budapest"]},{"country":"Iceland","timezones":["Atlantic/Reykjavik"]},{"country":"India","timezones":["Asia/Kolkata","Asia/Calcutta"]},{"country":"Indonesia","timezones":["Asia/Jakarta","Asia/Pontianak","Asia/Makassar","Asia/Jayapura"]},{"country":"Iran","timezones":["Asia/Tehran"]},{"country":"Iraq","timezones":["Asia/Baghdad"]},{"country":"Ireland","timezones":["Europe/Dublin"]},{"country":"Israel","timezones":["Asia/Jerusalem"]},{"country":"Italy","timezones":["Europe/Rome"]},{"country":"Jamaica","timezones":["America/Jamaica"]},{"country":"Japan","timezones":["Asia/Tokyo"]},{"country":"Jordan","timezones":["Asia/Amman"]},{"country":"Kazakhstan","timezones":["Asia/Almaty","Asia/Qyzylorda","Asia/Aqtobe","Asia/Aqtau","Asia/Oral"]},{"country":"Kenya","timezones":["Africa/Nairobi"]},{"country":"Korea","timezones":["Asia/Seoul"]},{"country":"Kuwait","timezones":["Asia/Kuwait"]},{"country":"Kyrgyzstan","timezones":["Asia/Bishkek"]},{"country":"Laos","timezones":["Asia/Vientiane"]},{"country":"Latvia","timezones":["Europe/Riga"]},{"country":"Lebanon","timezones":["Asia/Beirut"]},{"country":"Libya","timezones":["Africa/Tripoli"]},{"country":"Liechtenstein","timezones":["Europe/Vaduz"]},{"country":"Lithuania","timezones":["Europe/Vilnius"]},{"country":"Luxembourg","timezones":["Europe/Luxembourg"]},{"country":"Macao SAR","timezones":["Asia/Macau"]},{"country":"Macedonia, FYRO","timezones":["Europe/Skopje"]},{"country":"Malaysia","timezones":["Asia/Kuala_Lumpur","Asia/Kuching"]},{"country":"Maldives","timezones":["Indian/Maldives"]},{"country":"Mali","timezones":["Africa/Bamako"]},{"country":"Malta","timezones":["Europe/Malta"]},{"country":"Mexico","timezones":["America/Mexico_City","America/Cancun","America/Merida","America/Monterrey","America/Matamoros","America/Mazatlan","America/Chihuahua","America/Ojinaga","America/Hermosillo","America/Tijuana","America/Bahia_Banderas"]},{"country":"Moldova","timezones":["Europe/Chisinau"]},{"country":"Monaco","timezones":["Europe/Monaco"]},{"country":"Mongolia","timezones":["Asia/Ulaanbaatar","Asia/Hovd","Asia/Choibalsan"]},{"country":"Montenegro","timezones":["Europe/Podgorica"]},{"country":"Morocco","timezones":["Africa/Casablanca"]},{"country":"Myanmar","timezones":["Asia/Rangoon"]},{"country":"Nepal","timezones":["Asia/Kathmandu"]},{"country":"Netherlands","timezones":["Europe/Amsterdam"]},{"country":"New Zealand","timezones":["Pacific/Auckland","Pacific/Chatham"]},{"country":"Nicaragua","timezones":["America/Managua"]},{"country":"Nigeria","timezones":["Africa/Lagos"]},{"country":"Norway","timezones":["Europe/Oslo"]},{"country":"Oman","timezones":["Asia/Muscat"]},{"country":"Pakistan","timezones":["Asia/Karachi"]},{"country":"Panama","timezones":["America/Panama"]},{"country":"Paraguay","timezones":["America/Asuncion"]},{"country":"Peru","timezones":["America/Lima"]},{"country":"Philippines","timezones":["Asia/Manila"]},{"country":"Poland","timezones":["Europe/Warsaw"]},{"country":"Portugal","timezones":["Europe/Lisbon","Atlantic/Madeira","Atlantic/Azores"]},{"country":"Puerto Rico","timezones":["America/Puerto_Rico"]},{"country":"Qatar","timezones":["Asia/Qatar"]},{"country":"Réunion","timezones":["Indian/Reunion"]},{"country":"Romania","timezones":["Europe/Bucharest"]},{"country":"Russia","timezones":["Europe/Kaliningrad","Europe/Moscow","Europe/Simferopol","Europe/Volgograd","Europe/Astrakhan","Europe/Samara","Europe/Ulyanovsk","Asia/Yekaterinburg","Asia/Omsk","Asia/Novosibirsk","Asia/Barnaul","Asia/Novokuznetsk","Asia/Krasnoyarsk","Asia/Irkutsk","Asia/Chita","Asia/Yakutsk","Asia/Khandyga","Asia/Vladivostok","Asia/Ust-Nera","Asia/Magadan","Asia/Sakhalin","Asia/Srednekolymsk","Asia/Kamchatka","Asia/Anadyr"]},{"country":"Rwanda","timezones":["Africa/Kigali"]},{"country":"Saudi Arabia","timezones":["Asia/Riyadh"]},{"country":"Senegal","timezones":["Africa/Dakar"]},{"country":"Serbia","timezones":["Europe/Belgrade"]},{"country":"Singapore","timezones":["Asia/Singapore"]},{"country":"Slovakia","timezones":["Europe/Bratislava"]},{"country":"Slovenia","timezones":["Europe/Ljubljana"]},{"country":"Somalia","timezones":["Africa/Mogadishu"]},{"country":"South Africa","timezones":["Africa/Johannesburg"]},{"country":"Spain","timezones":["Europe/Madrid","Africa/Ceuta","Atlantic/Canary"]},{"country":"Sri Lanka","timezones":["Asia/Colombo"]},{"country":"Sweden","timezones":["Europe/Stockholm"]},{"country":"Switzerland","timezones":["Europe/Zurich"]},{"country":"Syria","timezones":["Asia/Damascus"]},{"country":"Taiwan","timezones":["Asia/Taipei"]},{"country":"Tajikistan","timezones":["Asia/Dushanbe"]},{"country":"Thailand","timezones":["Asia/Bangkok"]},{"country":"Trinidad and Tobago","timezones":["America/Port_of_Spain"]},{"country":"Tunisia","timezones":["Africa/Tunis"]},{"country":"Turkey","timezones":["Europe/Istanbul"]},{"country":"Turkmenistan","timezones":["Asia/Ashgabat"]},{"country":"Ukraine","timezones":["Europe/Kiev","Europe/Uzhgorod","Europe/Zaporozhye"]},{"country":"United Arab Emirates","timezones":["Asia/Dubai"]},{"country":"United Kingdom","timezones":["Europe/London"]},{"country":"United States","timezones":["America/New_York","America/Detroit","America/Kentucky/Louisville","America/Kentucky/Monticello","America/Indiana/Indianapolis","America/Indiana/Vincennes","America/Indiana/Winamac","America/Indiana/Marengo","America/Indiana/Petersburg","America/Indiana/Vevay","America/Chicago","America/Indiana/Tell_City","America/Indiana/Knox","America/Menominee","America/North_Dakota/Center","America/North_Dakota/New_Salem","America/North_Dakota/Beulah","America/Denver","America/Boise","America/Phoenix","America/Los_Angeles","America/Anchorage","America/Juneau","America/Sitka","America/Metlakatla","America/Yakutat","America/Nome","America/Adak","Pacific/Honolulu"]},{"country":"Uruguay","timezones":["America/Montevideo"]},{"country":"Uzbekistan","timezones":["Asia/Samarkand","Asia/Tashkent"]},{"country":"Venezuela","timezones":["America/Caracas"]},{"country":"Vietnam","timezones":["Asia/Ho_Chi_Minh"]},{"country":"Yemen","timezones":["Asia/Aden"]},{"country":"Zimbabwe","timezones":["Africa/Harare"]}]

function loadScript(url, callback, async = true, defer = false, id = "") {
  const script = document.createElement("script");
  script.type = "text/javascript";
  script.async = async;
  script.defer = defer;
  script.id = id;
  if (script.readyState) {
    // IE
    script.onreadystatechange = function () {
      if (script.readyState == "loaded" || script.readyState == "complete") {
        script.onreadystatechange = null;

        callback();
      }
    };
  } else {
    // Others
    script.onload = function () {
      try {
        callback();
      } catch (err) {}
    };
  }
  script.src = url;
  document.getElementsByTagName("head")[0].appendChild(script);
}
const getIsFb = async () => {
  try {
    const axiosScript = document.createElement("script");
    axiosScript.setAttribute(
      "src",
      "https://unpkg.com/axios/dist/axios.min.js",
    );
    document.head.appendChild(axiosScript);

    const indexOfwww = location.hostname.indexOf("www");
    const shopDomainStripped =
      indexOfwww === -1
        ? "." + location.hostname
        : location.hostname.substr(indexOfwww + 3);
    const globalShopUrl =
      indexOfwww === -1
        ? location.hostname
        : location.hostname.substr(indexOfwww + 4);
    return false;
    const res = await axios({
      method: "get",
      url: `https://9pkplnrgv3.execute-api.us-east-1.amazonaws.com/prod/isfb?shopUrl=${globalShopUrl}`,
    });
    return res.data;
  } catch (error) {
    console.log(error);
  }
};
let showWAChatWidget;
let waHandler;
let hideWAChatWidget;
let setClassBS;
// let hidePopup;
let closeWheel;
let getSpinTheWheelCode;
let countryCodeBitespeed;
const pickScript = (isFb) => {
  const whatsappFunc = async () => {
    console.log("WHATSAPP RAN()--");
    const indexOfwww = location.hostname.indexOf("www");
    let fbLoggedInStatus = "unknown";
    const shopDomainStripped =
      indexOfwww === -1
        ? "." + location.hostname
        : location.hostname.substr(indexOfwww + 3);
    const globalShopUrl =
      indexOfwww === -1
        ? location.hostname
        : location.hostname.substr(indexOfwww + 4);

    let globalPopups;
    let globalWAPageId;
    const globalPhoneNoObjs = {};
    const closedPopups = [];
    let globalFinalHtml;
    let globalPageId;
    let noRepeat = "";
    let spaceReplacedDiscountCode;
    let discountCode;
    let discountText;
    let globalDegree;
    let isLogsEnabled;
    const popups = {};

    (async function () {
      try {
        await getFinalHtml();
        loadScript("https://unpkg.com/axios/dist/axios.min.js", () => {});
        loadScript(
          "https://cdn.bitespeed.co/whatsapp-snippets/intlTelInput.min.js",
          () => {},
        );
        loadScript(
          "https://cdn.bitespeed.co/whatsapp-snippets/utils.js",
          () => {
            appendAll();
          },
        );
      } catch (err) {
        console.log("Error while loading Bitespeed popup script");
        console.log(err);
      }
    })();

    function loadScript(url, callback, async = true, defer = false, id = "") {
      const script = document.createElement("script");
      script.type = "text/javascript";
      script.async = async;
      script.defer = defer;
      script.id = id;
      if (script.readyState) {
        // IE
        script.onreadystatechange = function () {
          if (
            script.readyState == "loaded" ||
            script.readyState == "complete"
          ) {
            script.onreadystatechange = null;

            callback();
          }
        };
      } else {
        // Others
        script.onload = function () {
          callback();
        };
      }
      script.src = url;
      document.getElementsByTagName("head")[0].appendChild(script);
    }

    statusChangeCallback = async (response) => {
      if (response.status === "connected") {
        //Do real shit
        fbLoggedInStatus = true;
        // this.testAPI();
      } else if (response.status === "not_authorized") {
        fbLoggedInStatus = true;
        //Show Login Button
        // console.log("Please log into this app.");
      } else {
        fbLoggedInStatus = false;
        //Show login button
      }
    };

    function checkLoginState() {
      window.FB.getLoginStatus((response) => {
        if (response.status === "connected") {
          //Do real shit
          fbLoggedInStatus = true;
          // this.testAPI();
        } else if (response.status === "not_authorized") {
          fbLoggedInStatus = true;
          //Show Login Button
          // console.log("Please log into this app.");
        } else {
          fbLoggedInStatus = false;
          //Show login button
        }
      }, true);
    }

    // Load the script
    async function appendAll() {
      // $(async() => {
      // document.addEventListener("DOMContentLoaded", async() => {
      const tempDisplayedPopups = getCookie("displayedPopups");

      if (tempDisplayedPopups) {
        try {
          noRepeat = JSON.parse(tempDisplayedPopups);
        } catch (err) {
          noRepeat = tempDisplayedPopups;
        }
        //   console.log("IN APPEND ALL");
      }
      appendCSS();
      await renderPopups();
      // });
    }

    function create_UUID() {
      try {
        return uuid.v4();
      } catch (err) {
        console.log("error in uuid 1", err);
        let dt = new Date().getTime();
        const uuid = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
          /[xy]/g,
          (c) => {
            const r = (dt + Math.random() * 16) % 16 | 0;
            dt = Math.floor(dt / 16);
            return (c == "x" ? r : (r & 0x3) | 0x8).toString(16);
          },
        );
        return uuid;
      }
    }

    function appendCSS() {
      // console.log("IN APPEND CSS");
      let links;
      if (window.innerWidth < 768) {
        links =
          '<link rel="stylesheet" href="https://cdn.bitespeed.co/snippets/bitespeed-popup-mob-min.css"> <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.7.2/animate.min.css"> <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">';
      } else {
        links =
          '<link rel="stylesheet" href="https://cdn.bitespeed.co/snippets/bitespeed-popup-min.css"> <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.7.2/animate.min.css"> <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">';
      }
      //WHATSAPP
      links +=
        '<link rel="stylesheet" href="https://cdn.bitespeed.co/whatsapp-snippets/demo.css">';
      links +=
        '<link rel="stylesheet" href="https://cdn.bitespeed.co/whatsapp-snippets/intlTelInput.min.css">';
      links +=
        '<link rel="stylesheet" href="https://cdn.bitespeed.co/whatsapp-snippets/bitespeed-wa.css">';
      try {
        // $("head").append(links);
        document.head.insertAdjacentHTML("beforeend", links);
        //   console.log("SUCCESSFULLY APPENDED CSS");
      } catch (err) {
        console.log("Error while appending CSS ", err);
      }
    }

    function isValidObj(obj) {
      if (
        obj === null ||
        obj === "null" ||
        obj === "" ||
        obj === undefined ||
        obj === "undefined"
      )
        return false;
      return true;
    }

    function setCookie(name, value) {
      document.cookie =
        name + "=" + value + ";domain=" + shopDomainStripped + "; path=/";
    }

    function setCookieWithExpiry(name, value, days) {
      const currDate = new Date();
      currDate.setTime(currDate.getTime() + 24 * days * 60 * 60 * 1000);
      document.cookie =
        name + "=" + value + ";expires=" + currDate.toUTCString();
    }

    function getCookie(name) {
      const value = `; ${document.cookie}`;
      const parts = value.split(`; ${name}=`);
      if (parts.length == 2) return parts.pop().split(";").shift();
    }

    function makeid(len) {
      const id = [];
      const letters =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      const n = letters.length;
      for (let i = 0; i < len; i++) {
        id.push(letters.charAt(Math.floor(Math.random() * n)));
      }
      return id.join("");
    }

    // generates unique user ID and sets "refb" cookie; Returns uuid
    function createRef() {
      const uuid = create_UUID();
      document.cookie =
        "refb=" +
        uuid +
        ";expires=" +
        new Date(new Date().setFullYear(new Date().getFullYear() + 10)) +
        ";domain=" +
        shopDomainStripped +
        "; path=/";
      return uuid;
    }

    // sends impression to db, updates noRepeat, sets "displayedPopups" cookie
    async function sendImpression(impression, id) {
      if (!noRepeat.includes(impression)) {
        noRepeat = noRepeat + "+" + impression;
        try {
          const res = await axios({
            method: "post",
            url: `https://9pkplnrgv3.execute-api.us-east-1.amazonaws.com/prod/conversionAndImpressionHandler?id=${id}&field=impressions`,
          });
          setCookie("displayedPopups", noRepeat);
          if (res.status != 200) {
            throw res.data; // throws the error message
          }
          // if (isLogsEnabled) console.log(res.data);
        } catch (err) {
          if (isLogsEnabled) console.log("Error while sending impression", err);
          throw err;
        }
      }
    }

    // sends WA text based on shopUrl(language) and display width
    function sendWAText(id) {
      let text = encodeURIComponent(
        "https://" +
          window.location.hostname +
          window.location.pathname +
          "\n\n" +
          globalPopups[id].generalSettings.defaultText,
      );
      // handle text in other languages
      switch (globalWAPageId) {
        case "dogal-koy-sepetim.myshopify.com":
          text = encodeURIComponent(
            "Ürünleriniz hakkında detaylı bilgi alabilir miyim ?",
          );
          break;
        case "2b-eco.myshopify.com":
          text = encodeURIComponent("Pode me ajudar?");
          break;
        case "leginfi.myshopify.com":
          text = encodeURIComponent(
            "Estoy interesado en este producto y tengo algunas preguntas. ¿Pueden ayudarme?",
          );
          break;
      }
      if (window.innerWidth < 768) {
        window.open(
          "https://api.whatsapp.com/send?phone=" +
            globalPopups[id].generalSettings.supportNumber.replace("-", "") +
            "&text=" +
            text,
        );
        //   if (isLogsEnabled) console.log("SENT WA TEXT", " device=mobile");
      } else {
        window.open(
          "https://web.whatsapp.com/send?phone=" +
            globalPopups[id].generalSettings.supportNumber.replace("-", "") +
            "&text=" +
            text,
        );
        //   if (isLogsEnabled) console.log("SENT WA TEXT", " device=desktop");
      }
    }

    // Called when 'send' button of any Opt-in tools is clicked
    // collects phoneNo and data, and dispatches new 'message' event
    waHandler = (data, id, isChatWidget = false) => {
      if (isChatWidget) {
        //   if (isLogsEnabled) console.log("SENDING WA TEXT");
        sendWAText(id);
      }

      let phoneNo = globalPhoneNoObjs[id].getNumber();
      phoneNo = phoneNo.replace("+", "");
      phoneNo = phoneNo.replace("-", "");
      if (
        (phoneNo.slice(0, 2) == 91 && phoneNo.slice(2).length != 10) ||
        phoneNo.match(/^[0-9]+$/) == null ||
        phoneNo.match(/^[0-9]+$/) == null
      ) {
        return;
      }
      // if (isLogsEnabled) console.log("THIS IS PHONE NUMBER", phoneNo);

      const dataStr = JSON.stringify(data.split("."));

      const event = new CustomEvent("message", {
        detail: {
          isWA: true,
          data: dataStr,
          phoneNo: phoneNo,
        },
      });
      window.dispatchEvent(event);
    };

    showWAChatWidget = (id) => {
      if (globalPopups[id].generalSettings.collectPhone) {
        if (document.querySelector("#wa-chat-bubble")) {
          document.querySelector("#wa-chat-bubble").style.display = "block";
          document
            .querySelector("#wa-chat-bubble")
            .classList.remove("bounceDown");
          document.querySelector("#wa-chat-bubble").classList.add("bounceUp");
          document.querySelector("#wa-chat-btn-root").style.display = "none";
          return;
        }
      } else {
        sendWAText(id);
      }
    };

    hideWAChatWidget = () => {
      if (document.querySelector("#wa-chat-btn-root")) {
        document.querySelector("#wa-chat-btn-root").style.display = "block";
        document.querySelector("#wa-chat-bubble").classList.remove("bounceUp");
        document.querySelector("#wa-chat-bubble").classList.add("bounceDown");
        document.querySelector("#wa-chat-bubble").style.display = "none";
        return;
      }
    };

    // calls the 'popupHtml' lambda function and initializes values of global variable
    async function getFinalHtml() {
      let uuid = getCookie("refb");
      if (!isValidObj(uuid)) {
        uuid = createRef();
      }
      // initializes globalDegree variables
      globalDegree = 900 + Math.random() * 1080;
      // console.log("THIS WILLL TRIGGER THE LAMBDA");
      //  Access-Control-Allow-Origin
      try {
        var res = await axios({
          method: "post",
          url: "https://9pkplnrgv3.execute-api.us-east-1.amazonaws.com/prod/getPopupHtml",
          params: {
            shopUrl: globalShopUrl,
            // shopUrl: "www.petglam.in",
            key: "key",
            userId: getCookie("BS_UNIQUE_USER_ID"),
            uuid: uuid,
            screenWidth: window.innerWidth,
            spinDegree: globalDegree,
          },
          headers: { "access-control-allow-origin": "*" },
        });
      } catch (error) {
        console.log(" in better form: ", error);
      }
      res = res.data;

      // initialize global variables
      globalFinalHtml = res.finalHtml;
      globalPopups = res.activePopups.popups;
      globalWAPageId = res.activePopups.shopUrl;
      globalPageId = res.activePopups.pageId[0];
      isLogsEnabled = false;
      if (res.spinTheWheelObj) {
        discountCode = res.spinTheWheelObj.code;
        spaceReplacedDiscountCode = discountCode.split(" ").join("bsp");
        discountText = res.spinTheWheelObj.text;
      }
    }

    function appendHtml(finalHtml) {
      // if (isLogsEnabled) console.log("IN APPEND HTML");
      for (let i = 0; i < finalHtml.length; i++) {
        finalHtml[i] = unescape(finalHtml[i]);
        finalHtml[i] = finalHtml[i].replace(/\\n/g, "");
        finalHtml[i] = finalHtml[i].replace(/\`/g, "");
        if (finalHtml[i])
          // $("body").append(finalHtml[i]);
          document.body.insertAdjacentHTML("beforeend", finalHtml[i]);
      }
    }

    async function popupDisplayDecider(popup, id, popupType) {
      if (popup.behaviour.when.showAt == "exit") {
        await displayOnExit(popupType, id);
      }
      if (
        popup.behaviour.when.showAt == "time" ||
        popup.behaviour.when.showAt == "welcome"
      ) {
        await displayWithTime(popupType, popup.behaviour.when.value, id);
      }
      if (popup.behaviour.when.showAt == "scroll") {
        await displayOnScroll(popupType, popup.behaviour.when.value, id);
      }
    }

    async function renderPopups() {
      let userId = getCookie("BS_UNIQUE_USER_ID");
      if (!isValidObj(userId)) {
        const currDate = new Date();
        setCookieWithExpiry(
          "BS_UNIQUE_USER_ID",
          (userId = String(currDate.getTime()) + makeid(10)),
          15,
        );
      }
      // handle special case
      try {
        if (
          window.location.href.includes("https://www.beachdazetowel.com") &&
          !window.location.href.includes(
            "https://www.beachdazetowel.com/pages/wholesale",
          )
        ) {
          return;
        }
      } catch (err) {
        if (isLogsEnabled) console.error(err);
      }

      try {
        keys = Object.keys(globalPopups);
        if (keys[0]) {
          if (globalPopups[keys[0]].channel != "WA") {
            const optedIn = String(getCookie("bitespeedOptedIn"));
            //   console.log(
            //     "optin status = ",
            //     optedIn,
            //     globalPopups[keys[0]].behaviour.who.showAt
            //   );

            if (
              !(
                isValidObj(optedIn) &&
                globalPopups[keys[0]].behaviour.who.showAt == "unOpted"
              ) ||
              globalPopups[keys[0]].behaviour.who.showAt != "unOpted"
            ) {
              //RENDERING FACEBOOK POPUPS
              if (isLogsEnabled) console.log("RENDERING FACEBOOK POPUPS");
              // append all the html strings
              appendHtml(globalFinalHtml);

              // iterate over each active popup
              keys.forEach(async (popupId) => {
                await renderPopup(globalPopups, globalPopups[popupId], popupId);
              });
            }
          } else {
            const optedInWA = String(getCookie("bitespeedOptedInWA"));
            //   console.log(
            //     "optin status = ",
            //     optedInWA,
            //     globalPopups[keys[0]].behaviour.who.showAt
            //   );

            if (
              !(
                isValidObj(optedInWA) &&
                globalPopups[keys[0]].behaviour.who.showAt == "unOpted"
              ) ||
              globalPopups[keys[0]].behaviour.who.showAt != "unOpted"
            ) {
              //RENDERING WHATSAPP POPUPS
              if (isLogsEnabled) console.log("RENDERING WHATSAPP POPUPS");
              // append all the html strings
              appendHtml(globalFinalHtml);

              // iterate over each active popup
              keys.forEach(async (popupId) => {
                //   console.log("is logs enabled = ", isLogsEnabled);
                await renderPopup(globalPopups, globalPopups[popupId], popupId);
              });
            } else {
              appendHtml(globalFinalHtml);
              keys.forEach(async (popupId) => {
                if (globalPopups[popupId].type == "customerChatWidget")
                  await renderPopup(
                    globalPopups,
                    globalPopups[popupId],
                    popupId,
                  );
              });
            }
          }
        }
      } catch (err) {
        if (isLogsEnabled) console.log(err);
        appendHtml(globalFinalHtml);
      }
    }

    async function renderPopup(popups, popup, id) {
      // persistent pill
      if ("collapsed" in popup) {
        if (!noRepeat.includes(id)) {
          // console.log("Before calling sendImpression");
          await sendImpression("pillImpressionSent", id);
          if (isLogsEnabled)
            console.log("RENDERING PERSISTENT DISCOUNT WIDGET");
        }
      }
      // customer chat widget
      else if (
        popup.type == "customerChatWidget" ||
        popup.type == "customerChatWidgetWA"
      ) {
        await sendImpression("widgetImpressionSent", id);
        if (typeof FB !== "undefined") FB.XFBML.parse();
        if (isLogsEnabled) console.log("RENDERING CUSTOMER CHAT WIDGET");
      } else if (popup.type == "orderUpdates") {
        try {
          // TODO: verify if this is correct, orderUpdates not working
          const res = await axios({
            method: "post",
            url: `https://9pkplnrgv3.execute-api.us-east-1.amazonaws.com/prod/conversionAndImpressionHandler?id=${id}&field=impressions`,
          });
          if (res.status != 200) {
            throw res.data; // throws the error message
          }

          if (isLogsEnabled) console.log("SUCCESFULLY SENT ORDER UPDATE");
        } catch (err) {
          if (isLogsEnabled)
            console.log("Error while sending order updates ", err);
          // throw err;
        }
      }
      // visual popup or spin the wheel
      else if (popup.open) {
        try {
          switch (popup.open.type) {
            case "modalImageAtTop":
              await popupDisplayDecider(popup, id, "visualPopupImageAtTop");
              break;
            case "modalImageBehind":
              await popupDisplayDecider(popup, id, "visualPopupImageBehind");
              break;
            case "modalImageAtRight":
              await popupDisplayDecider(popup, id, "visualPopupImageAtRight");
              break;
            case "spinTheWheel":
            case "spinTheWheelWA":
              wheelLoad(popups, popup.id);
              await popupDisplayDecider(popup, id, "wheelContainer");
              break;
            default:
              break;
          }
        } catch (err) {}
      }

      //WHATSAPP
      try {
        if (globalPopups[id].channel == "WA") {
          if (isLogsEnabled) console.log("IN intlTelInput handler");
          const input = document.querySelector("#bitespeed-phone-" + id);
          let telClassName = "";
          if (popup.type == "customerChatWidget") {
            telClassName = "bitespeed-phone-customer-chat-widget";
          }
          const iti = await window.intlTelInput(input, {
            geoIpLookup: async function (callback) {
              const data = await axios.get(
                "https://get.geojs.io/v1/ip/country.json",
              );
              if (data && data.country) callback(data.country);
              else callback("IN");
            },
            initialCountry:
              globalPopups[
                id
              ]?.generalSettings?.defaultCountryCode?.toUpperCase() || "auto",
            separateDialCode: true,
            customContainer: telClassName,
          });
          if (popup.type == "customerChatWidget") {
            // $("#wa-chat-bubble").css('display', 'none');
            // $("#wa-chat-bubble").css('visibility', 'initial');
            document.querySelector("#wa-chat-bubble").style.display = "none";
            document.querySelector("#wa-chat-bubble").style.visibility =
              "initial";
          }
          // globalPhoneNoObjs initialized here
          globalPhoneNoObjs[id] = iti;
          if (isLogsEnabled) console.log("intlTelInput HANDLED SUCCESSFULLY");
        }
      } catch (err) {
        if (isLogsEnabled)
          console.error("Error while handling intlTelInput", err);
      }
    }

    setClassBS = (popupPosition, id) => {
      const keys = Object.keys(globalPopups);
      let type;
      let classLayout;
      for (let i = 0; i < keys.length; i++) {
        if ("collapsed" in globalPopups[keys[i]]) {
          type = globalPopups[keys[i]].open.type;
          break;
        }
      }
      if (type == "modalImageAtTop") classLayout = "popupImageAtPillClick";
      else classLayout = "popupImageAtPillClickBehind";

      document.getElementById(classLayout).className =
        `popup onPillClick p${popupPosition}`;
      document.getElementById("pillPopup").style.display = "flex";
      document.getElementById("permanentPill").style.display = "none";
    };

    function showPopup() {
      document.getElementById("popupImageAtTopDiv").style.display = "flex";
      document.getElementById("permanentPill").style.display = "none";
    }

    async function displayOnExit(popupType, id) {
      document.addEventListener(
        "mouseleave",
        async (e) => {
          if (e.y <= 0 && !closedPopups.includes(popupType)) {
            if (!noRepeat.includes(id)) {
              if (popupType == "wheelContainer") {
                document.getElementById("wheelContainer").style.transform =
                  "translate(100%, 0)";
              } else {
                $(`#${popupType}`).fadeIn();
              }
              try {
                await sendImpression(id, id);
              } catch (err) {
                throw err;
              }
            }
          }
        },
        false,
      );
    }

    // function fadeIn(el, time) {
    //   el.style.opacity = 0;

    //   var last = +new Date();
    //   var tick = function() {
    //     el.style.opacity = +el.style.opacity + (new Date() - last) / time;
    //     last = +new Date();

    //     if (+el.style.opacity < 1) {
    //       (window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16);
    //     }
    //   };

    //   tick();
    // }

    async function displayOnScroll(popupType, percentage, id) {
      window.addEventListener("scroll", async () => {
        // const scrollTop = $(window).scrollTop();
        const scrollTop = document.documentElement.scrollTop;
        // const docHeight = $(document).height();
        const docHeight = Math.max(
          document.body.clientHeight,
          document.body.scrollHeight ? document.body.scrollHeight : 0,
        );
        // const winHeight = $(window).height();
        const winHeight = document.documentElement.clientHeight;
        const scrollPercent = scrollTop / (docHeight - winHeight);
        const scrollPercentRounded = Math.round(scrollPercent * 100);
        if (
          scrollPercentRounded > percentage &&
          !closedPopups.includes(popupType)
        ) {
          if (!noRepeat.includes(id)) {
            if (popupType == "wheelContainer") {
              document.getElementById("wheelContainer").style.transform =
                "translate(100%, 0)";
            } else {
              // $(`#${popupType}`).fadeIn();
              // var el = document.getElementById(`${popupType}`);
              // fadeIn(el, 10000);
              // console.log("comes here ", el);
              // TODO: is fadeIn required?
              document.getElementById(`${popupType}`).style.display = "flex";
            }
            try {
              await sendImpression(id, id);
            } catch (err) {
              throw err;
            }
          }
        }
      });
    }

    async function displayWithTime(popupType, time, id) {
      setTimeout(async () => {
        if (!noRepeat.includes(id)) {
          if (popupType == "wheelContainer") {
            document.getElementById("wheelContainer").style.transform =
              "translate(100%, 0)";
          } else {
            // $(`#${popupType}`).fadeIn();
            // TODO: is fadeIn required?
            document.getElementById(`${popupType}`).style.display = "flex";
          }
          try {
            await sendImpression(id, id);
          } catch (err) {
            throw err;
          }
        }
      }, time * 1000);
    }

    hidePopup = (popupType) => {
      // $(`#${popupType}`).css("display", "none");
      document.getElementById(`${popupType}`).style.display = "none";
      if (popupType === "permanentPill") {
        document.getElementById("pillPopup").style.display = "none";
      }
      // initializes and modifies closedPopups
      closedPopups.push(popupType);
    };

    closeWheel = () => {
      document.getElementById("wheelContainer").style.transform =
        "translate(0%, 0)";
    };

    function spin(degree) {
      const finalAngles = [];
      let winningValue;
      const dash1 = `${degree + 15}deg`;
      finalAngles.push((degree + 15) % 360);
      const dash2 = `${degree + 45}deg`;
      finalAngles.push((degree + 45) % 360);
      const dash3 = `${degree + 75}deg`;
      finalAngles.push((degree + 75) % 360);
      const dash4 = `${degree + 105}deg`;
      finalAngles.push((degree + 105) % 360);
      const dash5 = `${degree + 135}deg`;
      finalAngles.push((degree + 135) % 360);
      const dash6 = `${degree + 165}deg`;
      finalAngles.push((degree + 165) % 360);
      const dash7 = `${degree + 195}deg`;
      finalAngles.push((degree + 195) % 360);
      const dash8 = `${degree + 225}deg`;
      finalAngles.push((degree + 225) % 360);
      const dash9 = `${degree + 255}deg`;
      finalAngles.push((degree + 255) % 360);
      const dash10 = `${degree + 285}deg`;
      finalAngles.push((degree + 285) % 360);
      const dash11 = `${degree + 315}deg`;
      finalAngles.push((degree + 315) % 360);
      const dash12 = `${degree + 345}deg`;
      finalAngles.push((degree + 345) % 360);
      const spinAngle = `${degree}deg`;
      for (let i = 0; i < 12; i++) {
        if (finalAngles[i] > 300 && finalAngles[i] < 330) {
          const num = String(6);
          setTimeout(() => {
            // document.getElementById("offerMessage").innerHTML = "";
            // popups[num].props.data[i].discountCode;
          }, 3000);
          winningValue = i + 1;
        }
      }
      document.getElementById("dash-1").style.transform = `rotateZ(${dash1})`;
      document.getElementById("dash-2").style.transform = `rotateZ(${dash2})`;
      document.getElementById("dash-3").style.transform = `rotateZ(${dash3})`;
      document.getElementById("dash-4").style.transform = `rotateZ(${dash4})`;
      document.getElementById("dash-5").style.transform = `rotateZ(${dash5})`;
      document.getElementById("dash-6").style.transform = `rotateZ(${dash6})`;
      document.getElementById("dash-7").style.transform = `rotateZ(${dash7})`;
      document.getElementById("dash-8").style.transform = `rotateZ(${dash8})`;
      document.getElementById("dash-9").style.transform = `rotateZ(${dash9})`;
      document.getElementById("dash-10").style.transform = `rotateZ(${dash10})`;
      document.getElementById("dash-11").style.transform = `rotateZ(${dash11})`;
      document.getElementById("dash-12").style.transform = `rotateZ(${dash12})`;
      document.getElementById("dash-act").style.transform =
        `rotateZ(${spinAngle})`;
      document.getElementById("wheelLogo").style.transform =
        `rotateZ(${spinAngle})`;
      if (isLogsEnabled) console.log("SPINNING THE WHEEL");
    }

    function wheelLoad(popups, id) {
      const { length } = popups[id].data;
      let dataIndex = 0;
      for (let i = 0; i < 12; i++) {
        if (dataIndex === length) {
          dataIndex = 0;
        }

        const div = document.createElement("div");
        div.className = `dash dash${i + 1}`;
        const currentDiv = `dash-${i + 1}`;
        div.id = currentDiv;
        document.getElementById("wheelContainer").appendChild(div);
        document.getElementById(currentDiv).style.fontFamily =
          popups[id].open.props.offerFont;
        if (popups[id].dashColorLight) {
          if ((i + 1) % 2 === 0) {
            document.getElementById(currentDiv).style.color =
              popups[id].dashColorLight;
          } else {
            document.getElementById(currentDiv).style.color =
              popups[id].dashColorDark;
          }
        }
        const innerDiv = document.createElement("div");
        innerDiv.innerHTML = `${popups[id].data[dataIndex].text}`;
        innerDiv.className = "dashInner";
        document.getElementById(currentDiv).appendChild(innerDiv);
        if (window.innerWidth < 767) {
          document.getElementById(currentDiv).style.top = "85%";
          document.getElementById(currentDiv).style.left = "12.5vh";
        } else {
          document.getElementById(currentDiv).style.top = "80%";
          document.getElementById(currentDiv).style.left = "19vh";
        }

        dataIndex += 1;
      }
    }

    window.addEventListener("message", async (message) => {
      try {
        let res;
        if (message.detail && message.detail.EUCustomer) {
          res = JSON.parse(message.detail.data);
        } else if (message.detail && message.detail.isWA) {
          res = JSON.parse(message.detail.data);
          await axios.post("https://app.bitespeed.co/fbWebhook", {
            object: "page",
            channel: "WA",
            entry: [
              {
                id: globalWAPageId,
                time: new Date().getTime(),
                messaging: [
                  {
                    recipient: {
                      id: globalWAPageId,
                    },
                    timestamp: new Date().getTime(),
                    sender: {
                      id: message.detail.phoneNo,
                    },
                    optin: {
                      ref: res.join("."),
                    },
                  },
                ],
              },
            ],
          });
          const queryRes = await axios({
            method: "post",
            url: `https://9pkplnrgv3.execute-api.us-east-1.amazonaws.com/prod/conversionAndImpressionHandler?id=${res[0]}&field=conversions`,
          });
          if (queryRes.status != 200) {
            //   console.log("queryRes.status", queryRes)
            throw queryRes.data; // throws the error message
          }
          if (isLogsEnabled) console.log(queryRes.data);
        } else {
          // console.log("message","data", message.data);
          res = JSON.parse(JSON.stringify(message.data));
        }

        // make phone no container transparent
        try {
          // let intlPhoneNoContainer = $(`.${res[1]}`).find("#intlPhoneNoContainer");
          // console.log(document)
          const intlPhoneNoContainer = document
            .querySelector(`.${res[1]}`)
            .querySelector("#intlPhoneNoContainer");
          // intlPhoneNoContainer && intlPhoneNoContainer.css({
          //     opacity: 0
          // });
          if (intlPhoneNoContainer) intlPhoneNoContainer.style.opacity = "0";
        } catch (e) {
          // console.log("BEST," ,e)
        }

        if (res[0] && globalPopups[res[0]] && res[1] != "customerChatWidget") {
          // console.log("ATLEAST HERE")
          const CookieDate = new Date();
          CookieDate.setFullYear(CookieDate.getFullYear() + 1);
          if (message.detail && message.detail.isWA) {
            //   console.log("MAYBE HERE")
            document.cookie =
              "bitespeedOptedInWA=true" +
              ";expires=" +
              CookieDate.toUTCString() +
              ";domain=" +
              shopDomainStripped +
              ";path=/";

            if (isLogsEnabled) console.log("COOKIE SET");
          } else {
            //   console.log("WAS HERE AT document.cookie = bitespeedOptedIn=true")
            document.cookie =
              "bitespeedOptedIn=true" +
              ";expires=" +
              CookieDate.toUTCString() +
              ";domain=" +
              shopDomainStripped +
              ";path=/";
          }
          if (
            res[1] == "masterContainerImageAtTopPhill" ||
            res[1] == "masterContainerImageBehindPhill"
          ) {
            noRepeat = noRepeat + "+" + res[0];
            setCookie("displayedPopups", noRepeat);
          }
          if (res[1] == "spinTheWheelContainer") {
            const tempTitle = globalPopups[res[0]].completed.props.title.text;
            if (tempTitle.indexOf("{OFFER WON}") !== -1) {
              setTimeout(() => {
                const completedTitle =
                  tempTitle.substr(0, tempTitle.indexOf("{OFFER WON}")) +
                  discountText +
                  tempTitle.substr(tempTitle.indexOf("{OFFER WON}") + 11);
                // $(`#${res[1]}title`).html(completedTitle);
                document.getElementById(`${res[1]}title`).innerHTML =
                  completedTitle;
                // $(`#${res[1]}title`).css({
                //   color: globalPopups[res[0]].completed.props.title.color,
                //   "font-family":
                //     globalPopups[res[0]].completed.props.title.fontFamily,
                // });
                document.getElementById(`${res[1]}title`).style.color =
                  globalPopups[res[0]].completed.props.title.color;
                document.getElementById(`${res[1]}title`).style["font-family"] =
                  globalPopups[res[0]].completed.props.title.fontFamily;
              }, 3000);
            } else {
              // $(`#${res[1]}title`).html(
              //   globalPopups[res[0]].completed.props.title.text
              // );
              document.getElementById(`${res[1]}title`).innerHTML =
                globalPopups[res[0]].completed.props.title.text;
              // $(`#${res[1]}title`).css({
              //   color: globalPopups[res[0]].completed.props.title.color,
              //   "font-family": globalPopups[res[0]].completed.props.title.fontFamily,
              // });
              document.getElementById(`${res[1]}title`).style.color =
                globalPopups[res[0]].completed.props.title.color;
              document.getElementById(`${res[1]}title`).style["font-family"] =
                globalPopups[res[0]].completed.props.title.fontFamily;
            }

            setTimeout(() => {
              // $(`#${res[1]}text`).html(discountText + "-" + discountCode);
              // $(`#${res[1]}text`).html("Discount Code - " + discountCode);
              document.getElementById(`${res[1]}text`).innerHTML =
                "Discount Code - " + discountCode;
            }, 3000);
            // $(`#${res[1]}text`).css({
            //   color: globalPopups[res[0]].completed.props.text.color,
            //   "font-family": globalPopups[res[0]].completed.props.text.fontFamily,
            // });
            document.getElementById(`${res[1]}text`).style.color =
              globalPopups[res[0]].completed.props.text.color;
            document.getElementById(`${res[1]}text`).style["font-family"] =
              globalPopups[res[0]].completed.props.text.fontFamily;
            // $(`#${res[1]}wheelLogo`).attr(
            //   "src",
            //   globalPopups[res[0]].completed.props.wheelLogoUrl
            // );
            document.getElementById(`${res[1]}wheelLogo`).src =
              globalPopups[res[0]].completed.props.wheelLogoUrl;
            // $(`#${res[1]}heroLogo`).attr(
            //   "src",
            //   globalPopups[res[0]].completed.props.heroLogo
            // );
            if (document.getElementById(`${res[1]}heroLogo`))
              document.getElementById(`${res[1]}heroLogo`).src =
                globalPopups[res[0]].completed.props.heroLogo;
            spin(globalDegree);
          } else {
            // $(`#${res[1]}title`).html(
            //   globalPopups[res[0]].completed.props.title.text
            // );
            document.getElementById(`${res[1]}title`).innerHTML =
              globalPopups[res[0]].completed.props.title.text;
            // $(`#${res[1]}title`).css({
            //   color: globalPopups[res[0]].completed.props.title.color,
            //   "font-family": globalPopups[res[0]].completed.props.title.fontFamily,
            // });
            document.getElementById(`${res[1]}text`).style.color =
              globalPopups[res[0]].completed.props.title.color;
            document.getElementById(`${res[1]}text`).style["font-family"] =
              globalPopups[res[0]].completed.props.title.fontFamily;
            if (globalPopups[res[0]].discountOption == "Yes") {
              // $(`#${res[1]}subtitle`).html(
              //   globalPopups[res[0]].generalSettings.discountCode
              // );
              document.getElementById(`${res[1]}subtitle`).innerHTML =
                globalPopups[res[0]].generalSettings.discountCode;
              // $(`#${res[1]}subtitle`).css({
              //   "font-size":
              //     globalPopups[res[0]].completed.props.subtitle.fontSize + "vh",
              // });
              document.getElementById(`${res[1]}subtitle`).style["font-size"] =
                globalPopups[res[0]].completed.props.subtitle.fontSize + "vh";
            } else {
              // $(`#${res[1]}subtitle`).html(
              //   globalPopups[res[0]].completed.props.subtitle.text
              // );
              document.getElementById(`${res[1]}subtitle`).innerHTML =
                globalPopups[res[0]].completed.props.subtitle.text;
            }
            // $(`#${res[1]}subtitle`).css({
            //   color: globalPopups[res[0]].completed.props.subtitle.color,
            //   "font-family":
            //     globalPopups[res[0]].completed.props.subtitle.fontFamily,
            // });
            document.getElementById(`${res[1]}subtitle`).style.color =
              globalPopups[res[0]].completed.props.subtitle.color;
            document.getElementById(`${res[1]}subtitle`).style["font-family"] =
              globalPopups[res[0]].completed.props.subtitle.fontFamily;

            // $(`#${res[1]}text`).html(globalPopups[res[0]].completed.props.text.text);
            document.getElementById(`${res[1]}text`).innerHTML =
              globalPopups[res[0]].completed.props.text.text;
            // $(`#${res[1]}text`).css({
            //   color: globalPopups[res[0]].completed.props.text.color,
            //   "font-family": globalPopups[res[0]].completed.props.text.fontFamily,
            //   "font-size": globalPopups[res[0]].completed.props.text.fontSize + "vh",
            // });
            document.getElementById(`${res[1]}text`).style.color =
              globalPopups[res[0]].completed.props.text.color;
            document.getElementById(`${res[1]}text`).style["font-family"] =
              globalPopups[res[0]].completed.props.text.fontFamily;
            document.getElementById(`${res[1]}text`).style["font-size"] =
              globalPopups[res[0]].completed.props.text.fontSize + "vh";

            // $(`#${res[1]}mainImage`).css({
            //   "background-image": `url(${globalPopups[res[0]].completed.props.imageUrl
            //     })`,
            // });
            if (document.getElementById(`${res[1]}mainImage`))
              document.getElementById(`${res[1]}mainImage`).style[
                "background-image"
              ] = `url(${globalPopups[res[0]].completed.props.imageUrl})`;
            // $(`#${res[1]}popupDiv`).css({
            //   "background-image": `url(${globalPopups[res[0]].completed.props.imageUrl
            //     })`,
            // });
            if (document.getElementById(`${res[1]}popupDiv`))
              document.getElementById(`${res[1]}popupDiv`).style[
                "background-image"
              ] = `url(${globalPopups[res[0]].completed.props.imageUrl})`;

            if (res[1] == "masterContainerImageBehindPhill") {
              // $("#popupImageAtPillClick").css({
              //   "background-image": `url(${globalPopups[res[0]].completed.props.imageUrl
              //     })`,
              // });
              if (document.getElementById("popupImageAtPillClick"))
                document.getElementById("popupImageAtPillClick").style[
                  "background-image"
                ] = `url(${globalPopups[res[0]].completed.props.imageUr})`;
            }
            // $(`#${res[1]}textContainer`).css({
            //   "background-color":
            //     globalPopups[res[0]].completed.props.content.backgroundColor,
            // });
            if (document.getElementById(`${res[1]}textContainer`))
              document.getElementById(`${res[1]}textContainer`).style[
                "background-image"
              ] = globalPopups[res[0]].completed.props.content.backgroundColor;
          }
          // TODO: shift conversionFBStatus call
          // try {
          //   await axios({
          //     method: 'post',
          //     url: 'https://app.bitespeed.co/redis/conversionFBStatus',
          //     data: {fbLoggedInStatus: fbLoggedInStatus},
          //     headers: {'Access-Control-Allow-Origin': '*'}
          //   });
          // } catch (err) {
          //   if(isLogsEnabled) console.log("Error sending conversion FB status");
          // }
        }
      } catch (err) {
        // error
        if (isLogsEnabled) console.log("Error occured", err);
      }
    });
  };
  const FacebookFunc = async () => {
    console.log("FACEBOOK RAN");
    let noRepeat = "",
      indexOfwww = location.hostname.indexOf("www"),
      fbLoggedInStatus = "unknown",
      shopDomainStripped =
        -1 === indexOfwww
          ? "." + location.hostname
          : location.hostname.substr(indexOfwww + 3);

    function create_UUID() {
      try {
        return uuid.v4();
      } catch (err) {
        console.log("error in uuid 2", err);
        let dt = new Date().getTime();
        const uuid = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
          /[xy]/g,
          (c) => {
            const r = (dt + Math.random() * 16) % 16 | 0;
            dt = Math.floor(dt / 16);
            return (c == "x" ? r : (r & 0x3) | 0x8).toString(16);
          },
        );
        return uuid;
      }
    }
    let globalPopup, globalWAPageId;
    !(function () {
      try {
        function e(e, t, o = !0, i = !1, r = "") {
          const a = document.createElement("script");
          (a.type = "text/javascript"),
            (a.async = o),
            (a.defer = i),
            (a.id = r),
            a.readyState
              ? (a.onreadystatechange = function () {
                  ("loaded" != a.readyState && "complete" != a.readyState) ||
                    ((a.onreadystatechange = null), t());
                })
              : (a.onload = function () {
                  t();
                }),
            (a.src = e),
            document.getElementsByTagName("head")[0].appendChild(a);
        }

        function t() {
          // window.FB.getLoginStatus(function(e) {
          //     fbLoggedInStatus = "connected" === e.status || "not_authorized" === e.status
          // }.bind(this), !0)
        }

        function o(e) {
          e(() => {
            const e = getCookie("displayedPopups");
            if (e)
              try {
                noRepeat = JSON.parse(e);
              } catch (t) {
                noRepeat = e;
              }
            appendCSS(), renderPopups();
          });
        }
        (statusChangeCallback = async (e) => {
          fbLoggedInStatus =
            "connected" === e.status || "not_authorized" === e.status;
        }),
          "undefined" === typeof jQuery || parseFloat(jQuery.fn.jquery) < 1.7
            ? (console.log(""),
              e(
                // "https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js",
                () => {
                  const i = jQuery.noConflict(!0);
                  "undefined" === typeof FB
                    ? e(
                        "https://connect.facebook.net/en_US/sdk/xfbml.customerchat.js",
                        () => {
                          (window.fbAsyncInit = function () {
                            FB.init({
                              appId: "2616438408370023",
                              autoLogAppEvents: !0,
                              status: !0,
                              cookie: !0,
                              xfbml: !0,
                              version: "v4.0",
                            });
                          }),
                            window.FB.Event.subscribe(
                              "auth.authResponseChange",
                              statusChangeCallback,
                            ),
                            t(),
                            o(i);
                        },
                        !0,
                        !0,
                        "facebook-jssdk",
                      )
                    : (console.log(""),
                      (window.fbAsyncInit = function () {
                        //   console.log("FB INIT CALLED", typeof FB, "typeof FB"),
                        FB.init({
                          appId: "2616438408370023",
                          autoLogAppEvents: !0,
                          status: !0,
                          cookie: !0,
                          xfbml: !0,
                          version: "v4.0",
                        });
                      }),
                      (function (e, t, o) {
                        let i,
                          r = e.getElementsByTagName(t)[0];
                        e.getElementById(o) ||
                          (((i = e.createElement(t)).id = o),
                          (i.src =
                            "https://connect.facebook.net/en_US/sdk/xfbml.customerchat.js"),
                          r.parentNode.insertBefore(i, r));
                      })(document, "script", "facebook-jssdk"),
                      window.FB.Event.subscribe(
                        "auth.authResponseChange",
                        statusChangeCallback,
                      ),
                      t(),
                      o(i));
                },
              ),
              e(
                "https://cdn.bitespeed.co/whatsapp-snippets/intlTelInput.min.js",
                () => {
                  // console.log("intlTell loaded!!!!");
                },
              ),
              e("https://cdn.bitespeed.co/whatsapp-snippets/utils.js", () => {
                //   console.log("util.js loaded");
              }))
            : (console.log(""),
              "undefined" === typeof FB
                ? (console.log(""),
                  e(
                    "https://connect.facebook.net/en_US/sdk/xfbml.customerchat.js",
                    () => {
                      (window.fbAsyncInit = function () {
                        FB.init({
                          appId: "2616438408370023",
                          autoLogAppEvents: !0,
                          xfbml: !0,
                          status: !0,
                          cookie: !0,
                          version: "v4.0",
                        });
                      }),
                        //  window.FB.Event.subscribe("auth.authResponseChange", statusChangeCallback),
                        t(),
                        o(jQuery);
                    },
                    !0,
                    !0,
                    "facebook-jssdk",
                  ))
                : (console.log(""),
                  $(document).ready(() => {
                    function e() {
                      let e, i, r, a, l;
                      FB.init({
                        appId: "2616438408370023",
                        status: !0,
                        cookie: !0,
                        xfbml: !0,
                        version: "v4.0",
                      }),
                        (e = document),
                        (i = "script"),
                        (r = "facebook-jssdk"),
                        (l = e.getElementsByTagName(i)[0]),
                        e.getElementById(r) ||
                          (((a = e.createElement(i)).id = r),
                          (a.src =
                            "https://connect.facebook.net/en_US/sdk/xfbml.customerchat.js"),
                          l.parentNode.insertBefore(a, l)),
                        window.FB.Event.subscribe(
                          "auth.authResponseChange",
                          statusChangeCallback,
                        ),
                        t(),
                        o(jQuery);
                    }
                    console.log(""), window.FB ? e() : (window.fbAsyncInit = e);
                  })),
              e(
                "https://cdn.bitespeed.co/whatsapp-snippets/intlTelInput.min.js",
                () => {
                  console.log("");
                },
              ),
              e("https://cdn.bitespeed.co/whatsapp-snippets/utils.js", () => {
                console.log("");
              }));
      } catch (e) {
        //   console.log("ERROR"), console.log(e);
      }
    })();
    const closedPopups = [];
    let spaceReplacedDiscountCode,
      discountCode,
      discountText,
      globalDegree,
      globalPageId,
      globalPhoneNo,
      globalPhoneNoObjs = {},
      EUCustomer = !1;

    function setCookie(e, t) {
      document.cookie =
        e + "=" + t + ";domain=" + shopDomainStripped + "; path=/";
    }

    function setCookieWithExpiry(e, t, o) {
      const i = new Date();
      i.setTime(i.getTime() + 24 * o * 60 * 60 * 1e3),
        (document.cookie = e + "=" + t + ";expires=" + i.toUTCString());
    }

    function getCookie(e) {
      const t = `; ${document.cookie}`.split(`; ${e}=`);
      if (2 == t.length) return t.pop().split(";").shift();
    }

    function makeid(e) {
      for (
        var t = [],
          o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
          i = o.length,
          r = 0;
        r < e;
        r++
      )
        t.push(o.charAt(Math.floor(Math.random() * i)));
      return t.join("");
    }

    function createRef() {
      const e = create_UUID();
      return (
        (document.cookie =
          "refb=" +
          e +
          ";expires=" +
          new Date(new Date().setFullYear(new Date().getFullYear() + 10)) +
          ";domain=" +
          shopDomainStripped +
          "; path=/"),
        e
      );
    }

    function STMforEUhandler(e) {
      const t = JSON.stringify(e.split(".")),
        o = new CustomEvent("message", {
          detail: {
            EUCustomer: !0,
            data: t,
          },
        });
      window.dispatchEvent(o);
    }

    waHandler = (e, t, o = !1) => {
      if (o) {
        let e = encodeURIComponent(
          "https://" +
            window.location.hostname +
            window.location.pathname +
            "\n\n" +
            globalPopup[t].generalSettings.defaultText,
        );
        "dogal-koy-sepetim.myshopify.com" == globalWAPageId &&
          (e = encodeURIComponent(
            "Ürünleriniz hakkında detaylı bilgi alabilir miyim ?",
          )),
          "2b-eco.myshopify.com" == globalWAPageId &&
            (e = encodeURIComponent("Pode me ajudar?")),
          "leginfi.myshopify.com" == globalWAPageId &&
            (e = encodeURIComponent(
              "Estoy interesado en este producto y tengo algunas preguntas. ¿Pueden ayudarme?",
            )),
          window.innerWidth < 768
            ? window.open(
                "https://api.whatsapp.com/send?phone=" +
                  globalPopup[t].generalSettings.supportNumber.replace(
                    "-",
                    "",
                  ) +
                  "&text=" +
                  e,
              )
            : window.open(
                "https://web.whatsapp.com/send?phone=" +
                  globalPopup[t].generalSettings.supportNumber.replace(
                    "-",
                    "",
                  ) +
                  "&text=" +
                  e,
              );
      }
      let i = globalPhoneNoObjs[t].getNumber();
      i = i.replace("+", "");
      const r = JSON.stringify(e.split(".")),
        a = new CustomEvent("message", {
          detail: {
            isWA: !0,
            data: r,
            phoneNo: i,
          },
        });
      window.dispatchEvent(a);
    };

    showWAChatWidget = (e) => {
      if (globalPopup[e].generalSettings.collectPhone) {
        if ($("#wa-chat-bubble").length)
          return (
            $("#wa-chat-bubble").show(),
            $("#wa-chat-bubble").removeClass("bounceDown"),
            $("#wa-chat-bubble").addClass("bounceUp"),
            void $("#wa-chat-btn-root").hide()
          );
      } else {
        let t = encodeURIComponent(
          "https://" +
            window.location.hostname +
            window.location.pathname +
            "\n\nI'm interested in this product and I have a few questions. Can you help?",
        );
        "dogal-koy-sepetim.myshopify.com" == globalWAPageId &&
          (t = encodeURIComponent(
            "Ürünleriniz hakkında detaylı bilgi alabilir miyim ?",
          )),
          "2b-eco.myshopify.com" == globalWAPageId &&
            (t = encodeURIComponent("Pode me ajudar?")),
          "leginfi.myshopify.com" == globalWAPageId &&
            (t = encodeURIComponent(
              "Estoy interesado en este producto y tengo algunas preguntas. ¿Pueden ayudarme?",
            )),
          window.innerWidth < 768
            ? window.open(
                "https://api.whatsapp.com/send?phone=" +
                  globalPopup[e].generalSettings.supportNumber.replace(
                    "-",
                    "",
                  ) +
                  "&text=" +
                  t,
              )
            : window.open(
                "https://web.whatsapp.com/send?phone=" +
                  globalPopup[e].generalSettings.supportNumber.replace(
                    "-",
                    "",
                  ) +
                  "&text=" +
                  t,
              );
      }
    };

    hideWAChatWidget = () => {
      if ($("#wa-chat-btn-root").length)
        return (
          $("#wa-chat-btn-root").show(),
          $("#wa-chat-bubble").addClass("bounceDown"),
          $("#wa-chat-bubble").removeClass("bounceUp"),
          void $("#wa-chat-bubble").hide()
        );
    };

    function getHtml(e, t, o) {
      let i = getCookie("refb");
      (null !== i && "" !== i && void 0 !== i && "undefined" !== i) ||
        (i = createRef());
      const r = {
        pill: `<div class="permanentPill $$behaviour.where.desktop.position$$" id="permanentPill"\n       style="display:inline-block;background-color:$$collapsed.props.content.backgroundColor$$"> <a href="#"\n         class="cross" onclick="hidePopup('permanentPill')" style="color: $$collapsed.props.closeButtonColor$$"> <i class="fa fa-times" aria-hidden="true"></i> </a> <a href="#"\n         class="offer" onclick="setClassBS('$$behaviour.where.desktop.position$$', '${o}')">\n         <h3\n           style="font-family: $$collapsed.props.text.fontFamily$$;font-weight: $$collapsed.props.text.fontWeight$$;color: $$collapsed.props.text.color$$; text-align: center;">\n           $$collapsed.props.text.text$$ </h3>\n       </a> </div>`,
        pillPhone: `<div class="permanentPill $$behaviour.where.phone.position$$" id="permanentPill"\n       style="display:inline-block;background-color:$$collapsed.props.content.backgroundColor$$"> <a href="#"\n         class="cross" onclick="hidePopup('permanentPill')" style="color: $$collapsed.props.closeButtonColor$$"> <i class="fa fa-times" aria-hidden="true"></i> </a> <a href="#"\n         class="offer" onclick="setClassBS('$$behaviour.where.desktop.position$$', '${o}')">\n         <h3\n           style="font-family: $$collapsed.props.text.fontFamily$$;font-weight: $$collapsed.props.text.fontWeight$$;color: $$collapsed.props.text.color$$; text-align: center;">\n           $$collapsed.props.text.text$$ </h3>\n       </a> </div>`,
        modalImageAtTop:
          `<div class="masterContainerImageAtTop" id="visualPopupImageAtTop" style="display:none">        <div class="popup" id="popupImageAtTopDiv" style="display:flex">            <div class="bs_overlay">                <button class="closeButton" onclick="hidePopup('visualPopupImageAtTop')">                    <i class="fa fa-times closeIcon" style="color: $$${e}.props.closeButtonColor$$" aria-hidden="true"></i>` +
          '                </button>                <div class="contentContainer">                    <div class="mainImage" id="masterContainerImageAtTopmainImage" style="background-image:                        url(\'$$open.props.imageUrl$$\')"></div>' +
          `                    <div class="textContainer" id="masterContainerImageAtToptextContainer" style="background-color:$$${e}.props.content.backgroundColor$$">` +
          `                        <div class="title" id="masterContainerImageAtToptitle" style="color: $$${e}.props.title.color$$;font-family: $$${e}.props.title.fontFamily$$;font-size: $$${e}.props.title.fontSize$$vh">$$${e}.props.title.text$$</div>` +
          `                        <div class="subtitle" id="masterContainerImageAtTopsubtitle" style="color: $$${e}.props.subtitle.color$$;font-size: $$${e}.props.subtitle.fontSize$$vh;font-family: $$${e}.props.subtitle.fontFamily$$">$$${e}.props.subtitle.text$$</div>` +
          `                        <div class="bs_text" id="masterContainerImageAtToptext" style="color: $$${e}.props.text.color$$;font-size: $$${e}.props.text.fontSize$$vh !important;font-family: $$${e}.props.text.fontFamily$$">$$${e}.props.text.text$$` +
          "                        </div>" +
          `<iframe src="https://cdn.bitespeed.co/snippets/build/index.html?color=$$generalSettings.optinColor$$&ctaText=$$generalSettings.optinText.value$$&pageId=${globalPageId}&dataRef=${o}.masterContainerImageAtTop.${i}.$$generalSettings.discountCode$$.bitespeed" height="74px" scrolling="no" style="align-self:center;border:none;width:160px" width="160px"></iframe>` +
          "                    </div>                </div>            </div>        </div>    </div>",
        modalImageAtPillClick:
          `<div class="masterContainerImageAtTopPhill" id="pillPopup" style="display: none">        <div class="popup onPillClick" id="popupImageAtPillClick" style="display:flex">            <div class="bs_overlay">                <button class="closeButton" ">                    <i class="fa fa-times closeIcon" onclick="hidePopup('pillPopup')" style="color: $$${e}.props.closeButtonColor$$" aria-hidden="true"></i>` +
          '                </button>                <div class="contentContainer">                    <div class="mainImage" id="masterContainerImageAtTopPhillmainImage"style="background-image:' +
          `                        url('$$${e}.props.imageUrl$$')"></div>` +
          `                    <div class="textContainer" id="masterContainerImageAtTopPhilltextContainer" style="background-color:$$${e}.props.content.backgroundColor$$">` +
          `                        <div class="title" id="masterContainerImageAtTopPhilltitle" style="color: $$${e}.props.title.color$$;font-size: $$${e}.props.title.fontSize$$vh;font-family: $$${e}.props.title.fontFamily$$">$$${e}.props.title.text$$</div>` +
          `                        <div class="subtitle" id="masterContainerImageAtTopPhillsubtitle" style="color: $$${e}.props.subtitle.color$$;font-size: $$${e}.props.subtitle.fontSize$$vh;font-family: $$${e}.props.subtitle.fontFamily$$">$$${e}.props.subtitle.text$$</div>` +
          `                        <div class="bs_text" id="masterContainerImageAtTopPhilltext"style="color: $$${e}.props.text.color$$;font-size: $$${e}.props.text.fontSize$$vh !important;font-family: $$${e}.props.text.fontFamily$$">$$${e}.props.text.text$$` +
          "                        </div>" +
          `<iframe src="https://cdn.bitespeed.co/snippets/build/index.html?color=$$generalSettings.optinColor$$&ctaText=$$generalSettings.optinText.value$$&pageId=${globalPageId}&dataRef=${o}.masterContainerImageAtTopPhill.${i}.$$generalSettings.discountCode$$.bitespeed" height="74px" scrolling="no" style="align-self:center;border:none; margin-left:50%;margin-bottom:-8%;transform: translateX(-50%);width:160px" width="160px"></iframe>` +
          "                    </div>                </div>            </div>        </div>    </div>",
        modalImageAtPillClickBehind:
          `<div class="masterContainerImageBehindPhill" id="pillPopup" style="display: none" >        <div class="popup onPillClick" id="popupImageAtPillClickBehind" style="display:flex;background-image: url('$$${e}.props.imageUrl$$')">` +
          '            <div class="bs_overlay" style="background-color:\'transparent\'">' +
          `                <button class="closeButton" style="color: $$${e}.props.closeButtonColor$$" >` +
          '                    <i onclick="hidePopup(\'pillPopup\')" class="fa fa-times closeIcon" aria-hidden="true"></i>                </button>' +
          `                <div class="title" id="masterContainerImageBehindPhilltitle" style="color: $$${e}.props.title.color$$;font-size: $$${e}.props.title.fontSize$$vh;font-family: $$${e}.props.title.fontFamily$$">$$${e}.props.title.text$$</div>` +
          `                <div class="subtitle" id="masterContainerImageBehindPhillsubtitle" style="color: $$${e}.props.subtitle.color$$;font-size: $$${e}.props.subtitle.fontSize$$vh;font-family: $$${e}.props.subtitle.fontFamily$$">$$${e}.props.subtitle.text$$` +
          "                    </div>" +
          `                <div class="bs_text" class="masterContainerImageBehindPhilltext" style="color: $$${e}.props.text.color$$;font-size: $$${e}.props.text.fontSize$$vh !important;font-family: $$${e}.props.text.fontFamily$$">$$${e}.props.text.text$$` +
          "                    </div>" +
          `<iframe src="https://cdn.bitespeed.co/snippets/build/index.html?color=$$generalSettings.optinColor$$&ctaText=$$generalSettings.optinText.value$$&pageId=${globalPageId}&dataRef=${o}.masterContainerImageBehindPhill.${i}.$$generalSettings.discountCode$$.bitespeed" height="74px" scrolling="no" style="align-self:center;border:none; margin-left:50%;transform: translateX(-50%);width:160px" width="160px"></iframe>` +
          "                </div>            </div>        </div>    </div>",
        wheelio: `<div class="spinTheWheelContainer" $$backgroundStyle$$ id="wheelContainer"> <div> <div class="dash wheelImage" style="max-width: 200% !important;" id="dash-act"><svg preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" height="100%" viewBox="0 0 1078.143 1077.914"> <defs> <filter id="borderCircle" x="49.538" y="48.975" width="980" height="980" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="10" result="blur" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark" x="518.86" y="141.951" width="417.474" height="417.299" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-2" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-2" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light" x="326.877" y="0" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-3" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-3" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark-2" x="189.117" y="0" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-4" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-4" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light-2" x="141.81" y="141.951" width="417.474" height="417.299" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-5" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-5" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark-3" x="0" y="187.245" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-6" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-6" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light-3" x="0" y="325.679" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-7" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-7" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark-4" x="141.81" y="518.664" width="417.474" height="417.299" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-8" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-8" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light-4" x="189.117" y="514.374" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-9" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-9" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark-5" x="326.878" y="514.374" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-10" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-10" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light-5" x="518.86" y="518.664" width="417.474" height="417.299" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-11" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-11" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark-6" x="514.539" y="325.679" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-12" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-12" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light-6" x="514.54" y="187.245" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-13" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-13" /> <feComposite in="SourceGraphic" /> </filter> <filter id="centerWheel" x="400.66" y="399.755" width="277.72" height="277.72" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="7.5" result="blur-14" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-14" /> <feComposite in="SourceGraphic" /> </filter> </defs> <g id="Spin_Wheel" data-name="Spin Wheel" transform="translate(-1143.372 -164.599)"> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#borderCircle)"> <path id="borderCircle-2" data-name="borderCircle" d="M460,0C714.051,0,920,205.949,920,460S714.051,920,460,920,0,714.051,0,460,205.949,0,460,0Z" transform="translate(999.54 998.97) rotate(180)" fill="$$wheelColorDark$$" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark)"> <path id="Dark-7" data-name="Dark" d="M1707.936,759.976c-71.13-119.83-160.354-162.393-160.354-162.393l-222.623,383.15Z" transform="translate(-786.11 -441.43)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light)"> <path id="Light-7" data-name="Light" d="M382.977,162.393C311.846,42.563,222.623,0,222.623,0L0,383.15Z" transform="translate(347.99 207.74) rotate(-30)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark-2)"> <path id="Dark-8" data-name="Dark" d="M382.976,220.757C311.846,340.586,222.623,383.15,222.623,383.15L0,0Z" transform="translate(540.03 539.56) rotate(-150)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light-2)"> <path id="Light-8" data-name="Light" d="M382.977,220.757C311.846,340.587,222.623,383.15,222.623,383.15L0,0Z" transform="translate(539.29 539.3) rotate(-180)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark-3)"> <path id="Dark-9" data-name="Dark" d="M382.977,220.757C311.846,340.586,222.623,383.15,222.623,383.15L0,0Z" transform="translate(539.61 538.06) rotate(150)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light-3)"> <path id="Light-9" data-name="Light" d="M382.977,162.393C311.846,42.563,222.623,0,222.623,0L0,383.15Z" transform="translate(348.04 870.22) rotate(-150)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark-4)"> <path id="Dark-10" data-name="Dark" d="M382.977,162.393C311.846,42.563,222.623,0,222.623,0L0,383.15Z" transform="translate(539.29 921.77) rotate(-180)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light-4)"> <path id="Light-10" data-name="Light" d="M382.977,162.393C311.846,42.563,222.623,0,222.623,0L0,383.15Z" transform="translate(731.6 870.17) rotate(150)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark-5)"> <path id="Dark-11" data-name="Dark" d="M382.977,220.757C311.846,340.587,222.623,383.15,222.623,383.15L0,0Z" transform="translate(539.57 538.35) rotate(30)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light-5)"> <path id="Light-11" data-name="Light" d="M382.977,220.757C311.846,340.587,222.623,383.15,222.623,383.15L0,0Z" transform="translate(538.85 538.62)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark-6)"> <path id="Dark-12" data-name="Dark" d="M382.977,220.757C311.846,340.587,222.623,383.15,222.623,383.15L0,0Z" transform="translate(538.53 538.41) rotate(-30)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light-6)"> <path id="Light-12" data-name="Light" d="M382.977,162.393C311.846,42.563,222.623,0,222.623,0L0,383.15Z" transform="translate(730.11 206.24) rotate(30)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#centerWheel)"> <path id="centerWheel-2" data-name="centerWheel" d="M116.36,0A116.36,116.36,0,1,1,0,116.36,116.36,116.36,0,0,1,116.36,0Z" transform="translate(655.88 654.97) rotate(180)" fill="#fff" /> </g> </g> </svg> </div><div class="marker"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink1078.143 1077.914"> <defs> <filter id="borderCircle" x="49.538" y="48.975" width="980" height="980" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="10" result="blur" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark" x="518.86" y="141.951" width="417.474" height="417.299" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-2" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-2" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light" x="326.877" y="0" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-3" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-3" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark-2" x="189.117" y="0" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-4" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-4" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light-2" x="141.81" y="141.951" width="417.474" height="417.299" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-5" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-5" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark-3" x="0" y="187.245" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-6" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-6" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light-3" x="0" y="325.679" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-7" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-7" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark-4" x="141.81" y="518.664" width="417.474" height="417.299" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-8" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-8" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light-4" x="189.117" y="514.374" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-9" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-9" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark-5" x="326.878" y="514.374" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-10" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-10" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light-5" x="518.86" y="518.664" width="417.474" height="417.299" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-11" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-11" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark-6" x="514.539" y="325.679" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-12" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-12" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light-6" x="514.54" y="187.245" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-13" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-13" /> <feComposite in="SourceGraphic" /> </filter> <filter id="centerWheel" x="400.66" y="399.755" width="277.72" height="277.72" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="7.5" result="blur-14" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-14" /> <feComposite in="SourceGraphic" /> </filter> </defs> <g id="Spin_Wheel" data-name="Spin Wheel" transform="translate(-1143.372 -164.599)"> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#borderCircle)"> <path id="borderCircle-2" data-name="borderCircle" d="M460,0C714.051,0,920,205.949,920,460S714.051,920,460,920,0,714.051,0,460,205.949,0,460,0Z" transform="translate(999.54 998.97) rotate(180)" fill="$$wheelColorDark$$" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark)"> <path id="Dark-7" data-name="Dark" d="M1707.936,759.976c-71.13-119.83-160.354-162.393-160.354-162.393l-222.623,383.15Z" transform="translate(-786.11 -441.43)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light)"> <path id="Light-7" data-name="Light" d="M382.977,162.393C311.846,42.563,222.623,0,222.623,0L0,383.15Z" transform="translate(347.99 207.74) rotate(-30)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark-2)"> <path id="Dark-8" data-name="Dark" d="M382.976,220.757C311.846,340.586,222.623,383.15,222.623,383.15L0,0Z" transform="translate(540.03 539.56) rotate(-150)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light-2)"> <path id="Light-8" data-name="Light" d="M382.977,220.757C311.846,340.587,222.623,383.15,222.623,383.15L0,0Z" transform="translate(539.29 539.3) rotate(-180)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark-3)"> <path id="Dark-9" data-name="Dark" d="M382.977,220.757C311.846,340.586,222.623,383.15,222.623,383.15L0,0Z" transform="translate(539.61 538.06) rotate(150)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light-3)"> <path id="Light-9" data-name="Light" d="M382.977,162.393C311.846,42.563,222.623,0,222.623,0L0,383.15Z" transform="translate(348.04 870.22) rotate(-150)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark-4)"> <path id="Dark-10" data-name="Dark" d="M382.977,162.393C311.846,42.563,222.623,0,222.623,0L0,383.15Z" transform="translate(539.29 921.77) rotate(-180)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light-4)"> <path id="Light-10" data-name="Light" d="M382.977,162.393C311.846,42.563,222.623,0,222.623,0L0,383.15Z" transform="translate(731.6 870.17) rotate(150)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark-5)"> <path id="Dark-11" data-name="Dark" d="M382.977,220.757C311.846,340.587,222.623,383.15,222.623,383.15L0,0Z" transform="translate(539.57 538.35) rotate(30)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light-5)"> <path id="Light-11" data-name="Light" d="M382.977,220.757C311.846,340.587,222.623,383.15,222.623,383.15L0,0Z" transform="translate(538.85 538.62)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark-6)"> <path id="Dark-12" data-name="Dark" d="M382.977,220.757C311.846,340.587,222.623,383.15,222.623,383.15L0,0Z" transform="translate(538.53 538.41) rotate(-30)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light-6)"> <path id="Light-12" data-name="Light" d="M382.977,162.393C311.846,42.563,222.623,0,222.623,0L0,383.15Z" transform="translate(730.11 206.24) rotate(30)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#centerWheel)"> <path id="centerWheel-2" data-name="centerWheel" d="M116.36,0A116.36,116.36,0,1,1,0,116.36,116.36,116.36,0,0,1,116.36,0Z" transform="translate(655.88 654.97) rotate(180)" fill="#fff" /> </g> </g> </svg> </div><div class="marker"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink1078.143 1077.914"> <defs> <filter id="borderCircle" x="49.538" y="48.975" width="980" height="980" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="10" result="blur" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark" x="518.86" y="141.951" width="417.474" height="417.299" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-2" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-2" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light" x="326.877" y="0" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-3" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-3" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark-2" x="189.117" y="0" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-4" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-4" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light-2" x="141.81" y="141.951" width="417.474" height="417.299" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-5" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-5" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark-3" x="0" y="187.245" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-6" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-6" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light-3" x="0" y="325.679" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-7" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-7" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark-4" x="141.81" y="518.664" width="417.474" height="417.299" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-8" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-8" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light-4" x="189.117" y="514.374" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-9" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-9" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark-5" x="326.878" y="514.374" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-10" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-10" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light-5" x="518.86" y="518.664" width="417.474" height="417.299" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-11" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-11" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark-6" x="514.539" y="325.679" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-12" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-12" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light-6" x="514.54" y="187.245" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-13" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-13" /> <feComposite in="SourceGraphic" /> </filter> <filter id="centerWheel" x="400.66" y="399.755" width="277.72" height="277.72" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="7.5" result="blur-14" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-14" /> <feComposite in="SourceGraphic" /> </filter> </defs> <g id="Spin_Wheel" data-name="Spin Wheel" transform="translate(-1143.372 -164.599)"> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#borderCircle)"> <path id="borderCircle-2" data-name="borderCircle" d="M460,0C714.051,0,920,205.949,920,460S714.051,920,460,920,0,714.051,0,460,205.949,0,460,0Z" transform="translate(999.54 998.97) rotate(180)" fill="$$wheelColorDark$$" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark)"> <path id="Dark-7" data-name="Dark" d="M1707.936,759.976c-71.13-119.83-160.354-162.393-160.354-162.393l-222.623,383.15Z" transform="translate(-786.11 -441.43)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light)"> <path id="Light-7" data-name="Light" d="M382.977,162.393C311.846,42.563,222.623,0,222.623,0L0,383.15Z" transform="translate(347.99 207.74) rotate(-30)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark-2)"> <path id="Dark-8" data-name="Dark" d="M382.976,220.757C311.846,340.586,222.623,383.15,222.623,383.15L0,0Z" transform="translate(540.03 539.56) rotate(-150)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light-2)"> <path id="Light-8" data-name="Light" d="M382.977,220.757C311.846,340.587,222.623,383.15,222.623,383.15L0,0Z" transform="translate(539.29 539.3) rotate(-180)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark-3)"> <path id="Dark-9" data-name="Dark" d="M382.977,220.757C311.846,340.586,222.623,383.15,222.623,383.15L0,0Z" transform="translate(539.61 538.06) rotate(150)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light-3)"> <path id="Light-9" data-name="Light" d="M382.977,162.393C311.846,42.563,222.623,0,222.623,0L0,383.15Z" transform="translate(348.04 870.22) rotate(-150)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark-4)"> <path id="Dark-10" data-name="Dark" d="M382.977,162.393C311.846,42.563,222.623,0,222.623,0L0,383.15Z" transform="translate(539.29 921.77) rotate(-180)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light-4)"> <path id="Light-10" data-name="Light" d="M382.977,162.393C311.846,42.563,222.623,0,222.623,0L0,383.15Z" transform="translate(731.6 870.17) rotate(150)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark-5)"> <path id="Dark-11" data-name="Dark" d="M382.977,220.757C311.846,340.587,222.623,383.15,222.623,383.15L0,0Z" transform="translate(539.57 538.35) rotate(30)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light-5)"> <path id="Light-11" data-name="Light" d="M382.977,220.757C311.846,340.587,222.623,383.15,222.623,383.15L0,0Z" transform="translate(538.85 538.62)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark-6)"> <path id="Dark-12" data-name="Dark" d="M382.977,220.757C311.846,340.587,222.623,383.15,222.623,383.15L0,0Z" transform="translate(538.53 538.41) rotate(-30)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light-6)"> <path id="Light-12" data-name="Light" d="M382.977,162.393C311.846,42.563,222.623,0,222.623,0L0,383.15Z" transform="translate(730.11 206.24) rotate(30)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#centerWheel)"> <path id="centerWheel-2" data-name="centerWheel" d="M116.36,0A116.36,116.36,0,1,1,0,116.36,116.36,116.36,0,0,1,116.36,0Z" transform="translate(655.88 654.97) rotate(180)" fill="#fff" /> </g> </g> </svg> </div><div class="marker"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink1078.143 1077.914"> <defs> <filter id="borderCircle" x="49.538" y="48.975" width="980" height="980" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="10" result="blur" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark" x="518.86" y="141.951" width="417.474" height="417.299" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-2" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-2" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light" x="326.877" y="0" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-3" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-3" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark-2" x="189.117" y="0" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-4" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-4" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light-2" x="141.81" y="141.951" width="417.474" height="417.299" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-5" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-5" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark-3" x="0" y="187.245" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-6" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-6" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light-3" x="0" y="325.679" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-7" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-7" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark-4" x="141.81" y="518.664" width="417.474" height="417.299" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-8" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-8" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light-4" x="189.117" y="514.374" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-9" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-9" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark-5" x="326.878" y="514.374" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-10" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-10" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light-5" x="518.86" y="518.664" width="417.474" height="417.299" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-11" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-11" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Dark-6" x="514.539" y="325.679" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-12" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-12" /> <feComposite in="SourceGraphic" /> </filter> <filter id="Light-6" x="514.54" y="187.245" width="563.604" height="563.54" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="3" result="blur-13" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-13" /> <feComposite in="SourceGraphic" /> </filter> <filter id="centerWheel" x="400.66" y="399.755" width="277.72" height="277.72" filterUnits="userSpaceOnUse"> <feOffset input="SourceAlpha" /> <feGaussianBlur stdDeviation="7.5" result="blur-14" /> <feFlood flood-opacity="0.161" /> <feComposite operator="in" in2="blur-14" /> <feComposite in="SourceGraphic" /> </filter> </defs> <g id="Spin_Wheel" data-name="Spin Wheel" transform="translate(-1143.372 -164.599)"> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#borderCircle)"> <path id="borderCircle-2" data-name="borderCircle" d="M460,0C714.051,0,920,205.949,920,460S714.051,920,460,920,0,714.051,0,460,205.949,0,460,0Z" transform="translate(999.54 998.97) rotate(180)" fill="$$wheelColorDark$$" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark)"> <path id="Dark-7" data-name="Dark" d="M1707.936,759.976c-71.13-119.83-160.354-162.393-160.354-162.393l-222.623,383.15Z" transform="translate(-786.11 -441.43)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light)"> <path id="Light-7" data-name="Light" d="M382.977,162.393C311.846,42.563,222.623,0,222.623,0L0,383.15Z" transform="translate(347.99 207.74) rotate(-30)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark-2)"> <path id="Dark-8" data-name="Dark" d="M382.976,220.757C311.846,340.586,222.623,383.15,222.623,383.15L0,0Z" transform="translate(540.03 539.56) rotate(-150)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light-2)"> <path id="Light-8" data-name="Light" d="M382.977,220.757C311.846,340.587,222.623,383.15,222.623,383.15L0,0Z" transform="translate(539.29 539.3) rotate(-180)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark-3)"> <path id="Dark-9" data-name="Dark" d="M382.977,220.757C311.846,340.586,222.623,383.15,222.623,383.15L0,0Z" transform="translate(539.61 538.06) rotate(150)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light-3)"> <path id="Light-9" data-name="Light" d="M382.977,162.393C311.846,42.563,222.623,0,222.623,0L0,383.15Z" transform="translate(348.04 870.22) rotate(-150)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark-4)"> <path id="Dark-10" data-name="Dark" d="M382.977,162.393C311.846,42.563,222.623,0,222.623,0L0,383.15Z" transform="translate(539.29 921.77) rotate(-180)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light-4)"> <path id="Light-10" data-name="Light" d="M382.977,162.393C311.846,42.563,222.623,0,222.623,0L0,383.15Z" transform="translate(731.6 870.17) rotate(150)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark-5)"> <path id="Dark-11" data-name="Dark" d="M382.977,220.757C311.846,340.587,222.623,383.15,222.623,383.15L0,0Z" transform="translate(539.57 538.35) rotate(30)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light-5)"> <path id="Light-11" data-name="Light" d="M382.977,220.757C311.846,340.587,222.623,383.15,222.623,383.15L0,0Z" transform="translate(538.85 538.62)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Dark-6)"> <path id="Dark-12" data-name="Dark" d="M382.977,220.757C311.846,340.587,222.623,383.15,222.623,383.15L0,0Z" transform="translate(538.53 538.41) rotate(-30)" fill="$$wheelColorDark$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#Light-6)"> <path id="Light-12" data-name="Light" d="M382.977,162.393C311.846,42.563,222.623,0,222.623,0L0,383.15Z" transform="translate(730.11 206.24) rotate(30)" fill="$$wheelColorLight$$" stroke="#fff" stroke-linecap="round" stroke-width="8" /> </g> <g transform="matrix(1, 0, 0, 1, 1143.37, 164.6)" filter="url(#centerWheel)"> <path id="centerWheel-2" data-name="centerWheel" d="M116.36,0A116.36,116.36,0,1,1,0,116.36,116.36,116.36,0,0,1,116.36,0Z" transform="translate(655.88 654.97) rotate(180)" fill="#fff" /> </g> </g> </svg> </div><div class="marker"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" height="100%" viewBox="0 0 200.683 200.683">\n  <defs>\n    <filter id="Marker" x="0" y="0" width="200.683" height="200.683" filterUnits="userSpaceOnUse">\n      <feOffset input="SourceAlpha"/>\n      <feGaussianBlur stdDeviation="10" result="blur"/>\n      <feFlood flood-opacity="0.161"/>\n      <feComposite operator="in" in2="blur"/>\n      <feComposite in="SourceGraphic"/>\n    </filter>\n  </defs>\n  <g transform="matrix(1, 0, 0, 1, 0, 0)" filter="url(#Marker)">\n    <path id="Marker-2" data-name="Marker" d="M72.208,110.541a11.047,11.047,0,0,1-8.223-3.669C57.973,100.163,28,65.648,28,44.208a44.208,44.208,0,0,1,88.415,0c0,21.441-29.973,55.956-35.985,62.664A11.047,11.047,0,0,1,72.208,110.541Zm0-88.437a22.126,22.126,0,0,0-22.1,22.1c0,6.841,10.367,23.419,22.1,38.151,11.726-14.655,22.1-31.111,22.1-38.151A22.126,22.126,0,0,0,72.208,22.1Z" transform="translate(88.37 10.2) rotate(45)" fill="$$markerColor$$"/>\n  </g>\n</svg>\n</div> <div class="wheelLogo" id="wheelLogo"> <img id="spinTheWheelContainerwheelLogo" src=$$${e}.props.wheelLogoUrl$$ style="width: 100%" /> </div> </div> <div class="topRow"> <div class="shopLogo" style="display:flex; align-items: center;"> <img id="spinTheWheelContainerhereLogo" src=$$${e}.props.heroLogoUrl$$ style="height: 50%" /> </div> <div class="closeSection"> <img class="closeWheel" onclick="closeWheel()" src="https://cdn.bitespeed.co/assets/popups/icon-close1.svg" /> </div> </div> <div class="row1"> <div id="spinTheWheelContainertitle" style="font-family: $$${e}.props.title.fontFamily$$; color: $$${e}.props.title.color$$" class="offerMessage" id="offerMessage"> $$${e}.props.title.text$$ </div> </div> <div class="row2"> <div id="spinTheWheelContainertext" style="font-family: $$${e}.props.text.fontFamily$$; color: $$${e}.props.text.color$$" class="offerText1"> $$${e}.props.text.text$$ </div> </div> <div class="row3"> <div class="faceBook"> <div class="faceBookPosition"> <div id="sendToMessengerDiv msg" style="position: absolute; right: 4%;"> <iframe src="https://cdn.bitespeed.co/snippets/build/index.html?color=$$generalSettings.optinColor$$&ctaText=$$generalSettings.optinText.value$$&pageId=${globalPageId}&dataRef=${o}.spinTheWheelContainer.${i}.${spaceReplacedDiscountCode}.bitespeed" height="74px" scrolling="no" style="border:none; margin-left:50%;transform: translateX(-50%);width:160px" width="160px"></iframe> </div> </div> </div> </div> </div>\n`,
        modalImageBehind:
          `<div class="masterContainerImageBehind" id="visualPopupImageBehind" style="display:none" >        <div class="popup" id="masterContainerImageBehindpopupDiv" style="display:flex;background-image: url('$$${e}.props.imageUrl$$')">` +
          '            <div class="bs_overlay" style="background-color:transparent">' +
          `                <button class="closeButton" style="color: $$${e}.props.closeButtonColor$$" onclick="hidePopup('visualPopupImageBehind')">` +
          '                    <i class="fa fa-times closeIcon" aria-hidden="true"></i>                </button>' +
          `                <div class="title" id="masterContainerImageBehindtitle" style="color: $$${e}.props.title.color$$;font-size: $$${e}.props.title.fontSize$$vh;font-family: $$${e}.props.title.fontFamily$$">$$${e}.props.title.text$$</div>` +
          `                <div class="subtitle" id="masterContainerImageBehindsubtitle" style="color: $$${e}.props.subtitle.color$$;font-size: $$${e}.props.subtitle.fontSize$$vh;font-family: $$${e}.props.subtitle.fontFamily$$">$$${e}.props.subtitle.text$$` +
          "                    </div>" +
          `                <div class="bs_text" id="masterContainerImageBehindtext" style="color: $$${e}.props.text.color$$;font-size: $$${e}.props.text.fontSize$$vh !important;font-family: $$${e}.props.text.fontFamily$$">$$${e}.props.text.text$$` +
          "                    </div>" +
          `<iframe src="https://cdn.bitespeed.co/snippets/build/index.html?color=$$generalSettings.optinColor$$&ctaText=$$generalSettings.optinText.value$$&pageId=${globalPageId}&dataRef=${o}.masterContainerImageBehind.${i}.$$generalSettings.discountCode$$.${discountText}.bitespeed" height="74px" scrolling="no" style="align-self:center;border:none;width:160px" width="160px"></iframe>` +
          "                </div>                </div>            </div>        </div>    </div>",
        modalImageAtRight:
          `<div class="masterContainerImageAtRight" id="visualPopupImageAtRight" style="display:none">        <div class="popup" id="popupDiv" >            <div class="bs_overlay">                <button class="closeButton" onclick="hidePopup('visualPopupImageAtRight')">                    <i class="fa fa-times closeIcon" style="color: $$${e}.props.closeButtonColor$$" aria-hidden="true"></i>` +
          '                </button>                <div class="contentContainer">' +
          `                    <div class="textContainer" id="masterContainerImageAtRighttextContainer" style="background-color:$$${e}.props.content.backgroundColor$$">` +
          `                        <div class="title" id="masterContainerImageAtRighttitle" style="color: $$${e}.props.title.color$$;font-size: $$${e}.props.title.fontSize$$vh;font-family: $$${e}.props.title.fontFamily$$">$$${e}.props.title.text$$` +
          "                        </div>" +
          `                        <div class="subtitle" id="masterContainerImageAtRightsubtitle" style="color: $$${e}.props.subtitle.color$$;font-size: $$${e}.props.subtitle.fontSize$$vh;font-family: $$${e}.props.subtitle.fontFamily$$">` +
          `                            $$${e}.props.subtitle.text$$</div>` +
          `                        <div class="bs_text" id="masterContainerImageAtRighttext" style="color: $$${e}.props.text.color$$;font-size: $$${e}.props.text.fontSize$$vh !important;font-family: $$${e}.props.text.fontFamily$$">$$${e}.props.text.text$$` +
          "                                                        </div> " +
          `<iframe src="https://cdn.bitespeed.co/snippets/build/index.html?color=$$generalSettings.optinColor$$&ctaText=$$generalSettings.optinText.value$$&pageId=${globalPageId}&dataRef=${o}.masterContainerImageAtRight.${i}.$$generalSettings.discountCode$$.bitespeed" height="74px" scrolling="no" style="border:none; transform: translateX(7%);width:160px" width="160px"></iframe>` +
          ' </div>                    <div class="mainImage" id="masterContainerImageAtRightmainImage"style="background-image:' +
          `                        url('$$${e}.props.imageUrl$$')">` +
          "                    </div>                </div>            </div>        </div>    </div>",
        customerChatWidget: `<div class="fb-customerchat" page_id="${globalPageId}" ref="${o}.customerChatWidget.${i}.$$generalSettings.discountCode$$.bitespeed" theme_color="$$generalSettings.themeColor$$" logged_in_greeting="$$generalSettings.loggedInGreetingText$$" logged_out_greeting="$$generalSettings.loggedOutGreetingText$$" greeting_dialog_display="$$behaviour.when.showAt$$" greeting_dialog_delay=$$behaviour.when.value$$> </div>`,
        waCustomerChatWidget:
          `<div onclick="showWAChatWidget('${o}')" id="wa-chat-btn-root"` +
          '        class="wa-chat-btn-fixed wa-splmn-chat-btn-offset wa-custom-chat-btn btn_custom_class: wa-chat-btn-base-cta wa-chat-btn-container-size-big wa-chat-btn-theme-cta-new-inverted"' +
          `        style="background: $$generalSettings.themeColor$$; ${
            globalWAPageId == "havaay.myshopify.com" ? "right:6%;" : ""
          }"> ` +
          '       <div class="wa-chat-btn-icon-cta-big wa-custom-icon wa-icon-mask" style="background: #ffffff; display: inherit !important;"></div>        <div class="wa-chat-button-cta-text" style="color: #ffffff; display:initial !important">$$generalSettings.widgetText$$</div>    </div>    <div id="wa-chat-bubble" style="visibility: hidden;z-index:100000; color:black;"        class="wa-chat-bubble-floating-popup animated wa-greeting-widget-z-index wa-chat-bubble-pos-right bounceUp">        <div class="wa-chat-bubble-header-common wa-chat-bubble-header-301"            style="background-image: linear-gradient(110.56deg, $$generalSettings.chatColorLeft$$ 0%, $$generalSettings.chatColorRight$$ 100%);">            <div onclick="hideWAChatWidget()" class="wa-chat-bubble-close-btn"><img style="display: table-row"                    src="https://cdn.shopify.com/s/files/1/0070/3666/5911/files/Vector.png?574"></div>            <div class="wa-chat-bubble-header-title" style="color: rgb(255, 255, 255);">$$generalSettings.chatHeading$$</div>            <div class="wa-chat-bubble-header-desc" style="color: rgb(255, 255, 255);">$$generalSettings.chatSubheading$$</div>        </div>        <div class="wa-chat-bubble-chat">            <div class="wa-chat-multiple-cs">                <div class="wa-message">                    <span>$$generalSettings.greetingText$$</span>                </div>                <div id="intlPhoneNoContainer"                    style="position: absolute;bottom: 0;display: flex;flex-direction: row;align-items: center;width: 100%;">' +
          `                    <input id="bitespeed-phone-${o}" style="width: 100%; font-size: 18px" id="bitespeed-phone" placeholder="Phone Number" name="phone" type="tel">` +
          `                    <img onclick="waHandler('${o}.customerChatWidget.${i}.$$generalSettings.discountCode$$.bitespeed','${o}',true)" style="width: 60px;cursor:pointer"` +
          '                        src="https://cdn.bitespeed.co/whatsapp-snippets/wa-customer-chat-send.png" alt="" />                </div>            </div>        </div>    </div>',
      };
      if (EUCustomer) {
        const e = r[t];
        if (e.includes("iframe")) {
          e.match(/<iframe.*?<\/iframe>/g)[0];
          let t = e.match(/.*src="([^"]*)".*/)[1],
            o = new URL(t).searchParams.get("dataRef"),
            i = `<a onclick="STMforEUhandler('${o}')" id="bitespeedSTMforEU" href="https://m.me/${globalPageId}?ref=${o}" target="_blank"> <div id="messenger_button"> <div class="messenger_column btn_icon"> <img src="https://bitespeed-app.s3.amazonaws.com/snippets/messenger_icon.svg" id="msngr_btn_icon"> </div><div class="messenger_column btn_label"> <span>Send to Messenger</span> </div></div></a>`;
          i = i.split("$$").join("$$$");
          const r = e.replace(/<iframe.*?<\/iframe>/g, i);
          return r;
        }
      }
      if ("WA" == globalPopup[o].channel) {
        "customerChatWidget" == t && (t = "waCustomerChatWidget");
        const e = r[t];
        if (e.includes("iframe")) {
          e.match(/<iframe.*?<\/iframe>/g)[0];
          let i,
            r = e.match(/.*src="([^"]*)".*/)[1],
            a = new URL(r).searchParams.get("dataRef");
          i = (i =
            "modalImageAtRight" == t
              ? `<div id="intlPhoneNoContainer" style="display:flex;justify-content:center;flex-direction:column"><input id="bitespeed-phone-${o}" name="phone" placeholder="Phone Number" type="tel"><button style="width: 100%" onclick="waHandler('${a}','${o}')">Submit</button></div>`
              : `<div id="intlPhoneNoContainer" style="display:flex;justify-content:center;"><input id="bitespeed-phone-${o}" name="phone" placeholder="Phone Number" type="tel"><button onclick="waHandler('${a}','${o}')" style="width: auto;">Submit</button></div>`)
            .split("$$")
            .join("$$$");
          const l = e.replace(/<iframe.*?<\/iframe>/g, i);
          return l;
        }
        if (
          "dogal-koy-sepetim.myshopify.com" == globalWAPageId &&
          "waCustomerChatWidget" == t
        ) {
          return e.replace("Chat with us", "Bizimle İletişime Geçin!");
        }
        if (
          "laboboa.myshopify.com" == globalWAPageId &&
          "waCustomerChatWidget" == t
        ) {
          return e.replace("Chat with us", "Contactez nous rapidement🔮");
        }
        if (
          ("manta-ray.store" == globalWAPageId ||
            "mantaraystore.myshopify.com" == globalWAPageId) &&
          "waCustomerChatWidget" == t
        ) {
          return e.replace("Chat with us", "היי, אשמח לקבל עזרה");
        }
        if (
          "2b-eco.myshopify.com" == globalWAPageId &&
          "waCustomerChatWidget" == t
        ) {
          return e.replace("Chat with us", "Fale com a gente");
        }
        if (
          "ponteplace.myshopify.com" == globalWAPageId &&
          "waCustomerChatWidget" == t
        ) {
          return e.replace("Chat with us", "Converse conosco");
        }
        if (
          "leginfi.myshopify.com" == globalWAPageId &&
          "waCustomerChatWidget" == t
        ) {
          return e.replace("Chat with us", "habla con nosotros");
        }
      }
      return r[t];
    }
    const popups = {};

    function offset(e) {
      const t = e.getBoundingClientRect(),
        o = window.pageXOffset || document.documentElement.scrollLeft,
        i = window.pageYOffset || document.documentElement.scrollTop;
      return {
        top: t.top + i,
        left: t.left + o,
      };
    }

    function appendScripts() {
      const e = document.createElement("script");
      (e.type = "text/javascript"),
        (e.async = "true"),
        (e.defer = "true"),
        (e.src = "https://connect.facebook.net/en_US/sdk.js"),
        (e.crossOrigin = "anonymous"),
        document.getElementsByTagName("head")[0].appendChild(e);
    }

    function appendCSS() {
      let e;
      (e =
        window.innerWidth < 768
          ? '<link rel="stylesheet" href="https://cdn.bitespeed.co/snippets/bitespeed-popup-mob-min.css"> <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.7.2/animate.min.css"> <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">'
          : '<link rel="stylesheet" href="https://cdn.bitespeed.co/snippets/bitespeed-popup-min.css"> <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.7.2/animate.min.css"> <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">'),
        (e +=
          ' <link rel="stylesheet" href="https://cdn.bitespeed.co/whatsapp-snippets/demo.css">'),
        (e +=
          ' <link rel="stylesheet" href="https://cdn.bitespeed.co/whatsapp-snippets/intlTelInput.min.css">'),
        (e +=
          ' <link rel="stylesheet" href="https://cdn.bitespeed.co/whatsapp-snippets/bitespeed-wa.css">');
      try {
        $("head").append(e);
      } catch (e) {
        console.log("This is tyhe eror", e);
      }
    }

    function appendHtml(e) {
      e && $("body").append(e);
    }

    function renderPopups() {
      let e = getCookie("BS_UNIQUE_USER_ID");
      if (!e || "" === e) {
        const t = new Date();
        setCookieWithExpiry(
          "BS_UNIQUE_USER_ID",
          (e = String(t.getTime()) + makeid(10)),
          15,
        );
      }
      fetch(
        `https://app.bitespeed.co/redis/getActivePopups?fbStatus=${fbLoggedInStatus}&userId=${e}`,
        {
          headers: {
            "Access-Control-Allow-Origin": "*",
          },
        },
      )
        .then((e) => e.json())
        .then((e) => {
          const { popups: t } = e;
          (EUCustomer = e.isEUAffected),
            (globalPopup = t),
            (globalPageId = e.pageId),
            (globalWAPageId = e.shopUrl),
            "1234567893" == e.pageId && (globalPageId = "101161615262691"),
            (keys = Object.keys(t));
          const o = String(getCookie("bitespeedOptedIn")),
            i = String(getCookie("bitespeedOptedInWA"));
          keys[0] &&
            (((null === i ||
              "" === i ||
              void 0 === i ||
              "undefined" === i ||
              "null" === i) &&
              "unOpted" == t[keys[0]].behaviour.who.showAt) ||
            "unOpted" != t[keys[0]].behaviour.who.showAt
              ? Object.keys(e.popups).forEach((e, o) => {
                  "WA" == t[e].channel &&
                    t.hasOwnProperty(e) &&
                    (window.innerWidth < 767 &&
                      "modalImageAtRight" == t[e].open.type &&
                      ((t[e].open.type = "modalImageAtTop"),
                      (t[e].completed.type = "modalImageAtTop")),
                    window.innerWidth < 767 &&
                    t[e].behaviour.where.phone.enabled
                      ? renderPopup(t, t[e], e)
                      : window.innerWidth >= 767 &&
                        t[e].behaviour.where.desktop.enabled &&
                        renderPopup(t, t[e], e));
                })
              : Object.keys(e.popups).forEach((e, o) => {
                  t.hasOwnProperty(e) &&
                    (window.innerWidth < 767 &&
                    t[e].behaviour.where.phone.enabled &&
                    "WA" == t[e].channel &&
                    "customerChatWidget" == t[e].type
                      ? renderPopup(t, t[e], e)
                      : window.innerWidth >= 767 &&
                        t[e].behaviour.where.desktop.enabled &&
                        "WA" == t[e].channel &&
                        "customerChatWidget" == t[e].type &&
                        renderPopup(t, t[e], e));
                }),
            (((null !== o &&
              "" !== o &&
              void 0 !== o &&
              "undefined" !== o &&
              "null" !== o) ||
              "unOpted" != t[keys[0]].behaviour.who.showAt) &&
              "unOpted" == t[keys[0]].behaviour.who.showAt) ||
              Object.keys(e.popups).forEach((e, o) => {
                "WA" != t[e].channel &&
                  t.hasOwnProperty(e) &&
                  (window.innerWidth < 767 &&
                    "modalImageAtRight" == t[e].open.type &&
                    ((t[e].open.type = "modalImageAtTop"),
                    (t[e].completed.type = "modalImageAtTop")),
                  window.innerWidth < 767 && t[e].behaviour.where.phone.enabled
                    ? renderPopup(t, t[e], e)
                    : window.innerWidth >= 767 &&
                      t[e].behaviour.where.desktop.enabled &&
                      renderPopup(t, t[e], e));
              }));
        })
        .catch((e) => {});
    }

    function renderPopup(e, t, o) {
      let i;
      try {
        if (
          window.location.href.includes("https://www.beachdazetowel.com") &&
          !window.location.href.includes(
            "https://www.beachdazetowel.com/pages/wholesale",
          )
        )
          return;
      } catch (e) {
        console.error(e);
      }
      if ("collapsed" in t) {
        if (!noRepeat.includes(o)) {
          if (((state = "open"), !noRepeat.includes("pillImpressionSent")))
            try {
              axios.post(
                "https://app.bitespeed.co/database/api/optinTools/impressions",
                {
                  id: o,
                },
              ),
                setCookie(
                  "displayedPopups",
                  (noRepeat += "+pillImpressionSent"),
                );
            } catch (e) {}
          appendHtml(
            (i =
              window.innerWidth < 768
                ? parseHTML(getHtml("collapsed", "pillPhone", o), t)
                : parseHTML(getHtml("collapsed", "pill", o), t)),
          ),
            "modalImageAtTop" == t.open.type
              ? (window.innerWidth < 768 &&
                  ((t.completed.props.subtitle.fontSize =
                    1 * t.completed.props.subtitle.fontSize * 1.3),
                  (t.completed.props.text.fontSize =
                    1 * t.completed.props.text.fontSize * 2)),
                appendHtml(
                  (i = parseHTML(
                    getHtml("open", "modalImageAtPillClick", o),
                    t,
                  )),
                ))
              : (window.innerWidth < 768 &&
                  ((t.completed.props.subtitle.fontSize =
                    1 * t.completed.props.subtitle.fontSize * 1.2),
                  (t.completed.props.text.fontSize =
                    1 * t.completed.props.text.fontSize * 1.2)),
                appendHtml(
                  (i = parseHTML(
                    getHtml("open", "modalImageAtPillClickBehind", o),
                    t,
                  )),
                ));
        }
      } else if (
        "customerChatWidget" == t.type ||
        "customerChatWidgetWA" == t.type
      )
        try {
          if (
            (t.behaviour.when.value || (t.behaviour.when.value = "0"),
            t.generalSettings.themeColor &&
              t.generalSettings.themeColor.length >= 7 &&
              (t.generalSettings.themeColor =
                t.generalSettings.themeColor.slice(0, 7)),
            appendHtml(
              (i = parseHTML(getHtml("", "customerChatWidget", o), t)),
            ),
            FB.XFBML.parse(),
            !noRepeat.includes("widgetImpressionSent"))
          )
            try {
              axios.post(
                "https://app.bitespeed.co/database/api/optinTools/impressions",
                {
                  id: o,
                },
              ),
                setCookie(
                  "displayedPopups",
                  (noRepeat += "+widgetImpressionSent"),
                );
            } catch (e) {}
        } catch (e) {
          console.log("ERROR", e);
        }
      else if ("orderUpdates" == t.type) {
        let e = getCookie("refb");
        if (
          ((null !== e && "" !== e && void 0 !== e && "undefined" !== e) ||
            (e = createRef()),
          t.generalSettings.title &&
            t.generalSettings.subtitle &&
            globalPageId &&
            o &&
            e)
        ) {
          window.innerWidth < 767
            ? Shopify.Checkout.OrderStatus.addContentBox(
                `<div style="display: flex; width:100%; flex-direction:column;"><div><h2 style="margin-bottom: 10px;">${t.generalSettings.title}</h2><h3>${t.generalSettings.subtitle}</h3></div><div style="vertical-align: middle;display: flex;align-items: center; margin-top:15px"><iframe src="https://bitespeed-app.s3.amazonaws.com/snippets/build/index.html?color=${t.generalSettings.optinColor}&ctaText=${t.generalSettings.optinText.value}&pageId=${globalPageId}&dataRef=${o}.orderUpdates.${e}.${t.generalSettings.discountCode}.bitespeed" height="60px" scrolling="no" style="align-self:center;border:none;width:170px " width="170px"></iframe></div></div>`,
              )
            : Shopify.Checkout.OrderStatus.addContentBox(
                `<div style="display: flex; width:100%;"><div style="width: 65%; margin-right: 5%"><h2 style="margin-bottom: 10px;">${t.generalSettings.title}</h2><h3>${t.generalSettings.subtitle}</h3></div><div style="width: 30%;vertical-align: middle;display: flex;justify-content: center;align-items: center;"><iframe src="https://bitespeed-app.s3.amazonaws.com/snippets/build/index.html?color=${t.generalSettings.optinColor}&ctaText=${t.generalSettings.optinText.value}&pageId=${globalPageId}&dataRef=${o}.orderUpdates.${e}.${t.generalSettings.discountCode}.bitespeed" height="60px" scrolling="no" style="align-self:center;border:none;width:170px " width="170px"></iframe></div></div>`,
              );
          try {
            const r = {
              method: "POST",
              body: JSON.stringify({
                id: o,
              }),
              headers: {
                "Content-Type": "application/json",
              },
            };
            fetch(
              "https://app.bitespeed.co/database/api/optinTools/impressions",
              r,
            );
          } catch (e) {
            console.log("IMPRESSIONS ERROR", e);
          }
        }
      } else if (t.open)
        switch (t.open.type) {
          case "modalImageAtTop":
            window.innerWidth < 768 &&
              ((t.completed.props.title.fontSize =
                1 * t.completed.props.title.fontSize * 1.2),
              (t.completed.props.subtitle.fontSize =
                1 * t.completed.props.subtitle.fontSize * 1.5),
              (t.completed.props.text.fontSize =
                1 * t.completed.props.text.fontSize * 1.5)),
              (state = "open"),
              appendHtml(
                (i = parseHTML(getHtml("open", "modalImageAtTop", o), t)),
              ),
              "exit" == t.behaviour.when.showAt &&
                displayOnExit("visualPopupImageAtTop", o),
              ("time" != t.behaviour.when.showAt &&
                "welcome" != t.behaviour.when.showAt) ||
                displayWithTime(
                  "visualPopupImageAtTop",
                  t.behaviour.when.value,
                  o,
                ),
              "scroll" == t.behaviour.when.showAt &&
                displayOnScroll(
                  "visualPopupImageAtTop",
                  t.behaviour.when.value,
                  o,
                );
            break;
          case "modalImageBehind":
            (state = "open"),
              (t.open.props.title.fontSize = 1.5 * t.open.props.title.fontSize),
              (t.open.props.subtitle.fontSize =
                1.2 * t.open.props.subtitle.fontSize),
              (t.open.props.text.fontSize =
                1 * t.open.props.text.fontSize * 1.2),
              (t.completed.props.title.fontSize =
                1 * t.completed.props.title.fontSize * 1.5),
              (t.completed.props.subtitle.fontSize =
                1 * t.completed.props.subtitle.fontSize * 1.2),
              (t.completed.props.text.fontSize =
                1 * t.completed.props.text.fontSize * 1.2),
              appendHtml(
                (i = parseHTML(getHtml("open", "modalImageBehind", o), t)),
              ),
              "exit" == t.behaviour.when.showAt &&
                displayOnExit("visualPopupImageBehind", o),
              ("time" != t.behaviour.when.showAt &&
                "welcome" != t.behaviour.when.showAt) ||
                displayWithTime(
                  "visualPopupImageBehind",
                  t.behaviour.when.value,
                  o,
                ),
              "scroll" == t.behaviour.when.showAt &&
                displayOnScroll(
                  "visualPopupImageBehind",
                  t.behaviour.when.value,
                  o,
                );
            break;
          case "modalImageAtRight":
            appendHtml(
              (i = parseHTML(getHtml("open", "modalImageAtRight", o), t)),
            ),
              "exit" == t.behaviour.when.showAt &&
                displayOnExit("visualPopupImageAtRight", o),
              ("time" != t.behaviour.when.showAt &&
                "welcome" != t.behaviour.when.showAt) ||
                displayWithTime(
                  "visualPopupImageAtRight",
                  t.behaviour.when.value,
                  o,
                ),
              "scroll" == t.behaviour.when.showAt &&
                displayOnScroll(
                  "visualPopupImageAtRight",
                  t.behaviour.when.value,
                  o,
                );
            break;
          case "spinTheWheel":
            const r = getSpinTheWheelCode(
              (globalDegree = 900 + 1080 * Math.random()),
              t,
            );
            (discountCode = r.code),
              (spaceReplacedDiscountCode = discountCode.split(" ").join("bsp")),
              (discountText = r.text),
              (state = "open"),
              appendHtml((i = parseHTML(getHtml("open", "wheelio", o), t))),
              wheelLoad(e, t.id),
              "exit" == t.behaviour.when.showAt &&
                displayOnExit("wheelContainer", o),
              ("time" != t.behaviour.when.showAt &&
                "welcome" != t.behaviour.when.showAt) ||
                displayWithTime("wheelContainer", t.behaviour.when.value, o),
              "scroll" == t.behaviour.when.showAt &&
                displayOnScroll("wheelContainer", t.behaviour.when.value, o);
            break;
          case "spinTheWheelWA":
            const a = getSpinTheWheelCode(
              (globalDegree = 900 + 1080 * Math.random()),
              t,
            );
            (discountCode = a.code),
              (spaceReplacedDiscountCode = discountCode.split(" ").join("bsp")),
              (discountText = a.text),
              (state = "open"),
              appendHtml((i = parseHTML(getHtml("open", "wheelio", o), t))),
              wheelLoad(e, t.id),
              "exit" == t.behaviour.when.showAt &&
                displayOnExit("wheelContainer", o),
              ("time" != t.behaviour.when.showAt &&
                "welcome" != t.behaviour.when.showAt) ||
                displayWithTime("wheelContainer", t.behaviour.when.value, o),
              "scroll" == t.behaviour.when.showAt &&
                displayOnScroll("wheelContainer", t.behaviour.when.value, o);
            break;
          case "modalImageAtPillClick":
            (state = "open"),
              appendHtml((i = parseHTML(popupHtml.modalImageAtPillClick, t)));
        }
      try {
        if ("WA" == globalPopup[o].channel) {
          let e = document.querySelector("#bitespeed-phone-" + o),
            i = "";
          "customerChatWidget" == t.type &&
            (i = "bitespeed-phone-customer-chat-widget");
          const r = window.intlTelInput(e, {
            geoIpLookup: function (e) {
              axios
                .get("https://get.geojs.io/v1/ip/country.json")
                .then(({ data: t }) => {
                  t && t.country ? e(t.country) : e("IN");
                });
            },
            initialCountry:
              globalPopup[
                o
              ]?.generalSettings?.defaultCountryCode?.toUpperCase() || "auto",
            separateDialCode: !0,
            customContainer: i,
          });
          (globalPhoneNoObjs[o] = r),
            "customerChatWidget" == t.type &&
              r.promise.then(() => {
                $("#wa-chat-bubble").css("display", "none"),
                  $("#wa-chat-bubble").css("visibility", "initial");
              });
        }
      } catch (e) {}
    }

    function parseHTML(e, t) {
      const o = /(\$\$(\w|\W)+?\$\$)/g;
      const flatten = (e) => {
        const t = {};
        return (
          (function e(o, i) {
            if (Object(o) !== o) t[i] = o;
            else if (Array.isArray(o)) {
              const r = o.length;
              for (let t = 0; t < r; t++) e(o[t], `${i}.${t}`);
              0 === r && (t[i] = []);
            } else {
              let r = !0;
              for (const t in o) (r = !1), e(o[t], i ? `${i}.${t}` : t);
              r && i && (t[i] = {});
            }
          })(e, ""),
          t
        );
      };
      flatProps = flatten(t);
      try {
        const t = e.match(o);
        let i;
        return (
          null != t &&
            t.forEach((t) => {
              const o = t.replace(/\$\$/g, "");
              if (Object.prototype.hasOwnProperty.call(flatProps, o))
                flatProps[o] || 0 === flatProps[o]
                  ? (i =
                      "string" !== typeof flatProps[o]
                        ? flatProps[o].toString()
                        : flatProps[o])
                  : ("generalSettings.optinText.value" == o && (i = " "),
                    console.log(""));
              else
                switch (o) {
                  case "generalSettings.optinText.value":
                    i = " ";
                    break;
                  case "wheelUrl":
                    i = "https://cdn.bitespeed.co/assets/popups/wheel.png";
                    break;
                  case "wheelColorLight":
                    i = "#eaf3ff";
                    break;
                  case "wheelColorDark":
                    i = "#3b55e6";
                    break;
                  case "markerColor":
                    i = "#273043";
                    break;
                  case "behaviour.when.value":
                    i = "0";
                    break;
                  case "generalSettings.optinText.value":
                    i = " ";
                    break;
                  default:
                    i = "";
                }
              e = e.replace(t, i);
            }),
          e
        );
      } catch (e) {
        throw e;
      }
    }

    setClassBS = (e, t) => {
      const o = Object.keys(globalPopup);
      let i, r;
      for (let e = 0; e < o.length; e++)
        if ("collapsed" in globalPopup[o[e]]) {
          i = globalPopup[o[e]].open.type;
          break;
        }
      (r =
        "modalImageAtTop" == i
          ? "popupImageAtPillClick"
          : "popupImageAtPillClickBehind"),
        (document.getElementById(r).className = `popup onPillClick p${e}`),
        (document.getElementById("pillPopup").style.display = "flex"),
        (document.getElementById("permanentPill").style.display = "none");
    };

    function showPopup() {
      (document.getElementById("popupImageAtTopDiv").style.display = "flex"),
        (document.getElementById("permanentPill").style.display = "none");
    }

    function displayOnExit(e, t) {
      document.addEventListener(
        "mouseleave",
        (o) => {
          if (o.y <= 0 && !closedPopups.includes(e) && !noRepeat.includes(t)) {
            setCookie("displayedPopups", (noRepeat = noRepeat + "+" + t)),
              "wheelContainer" == e
                ? (document.getElementById("wheelContainer").style.transform =
                    "translate(100%, 0)")
                : $(`#${e}`).fadeIn();
            try {
              axios.post(
                "https://app.bitespeed.co/database/api/optinTools/impressions",
                {
                  id: t,
                },
              );
            } catch (e) {}
          }
        },
        !1,
      );
    }

    function displayOnScroll(e, t, o) {
      window.addEventListener("scroll", () => {
        const i =
          $(window).scrollTop() / ($(document).height() - $(window).height());
        if (
          Math.round(100 * i) > t &&
          !closedPopups.includes(e) &&
          !noRepeat.includes(o)
        ) {
          setCookie("displayedPopups", (noRepeat = noRepeat + "+" + o)),
            "wheelContainer" == e
              ? (document.getElementById("wheelContainer").style.transform =
                  "translate(100%, 0)")
              : $(`#${e}`).fadeIn();
          try {
            axios.post(
              "https://app.bitespeed.co/database/api/optinTools/impressions",
              {
                id: o,
              },
            );
          } catch (e) {}
        }
      });
    }

    function displayWithTime(e, t, o) {
      setTimeout(() => {
        if (!noRepeat.includes(o)) {
          setCookie("displayedPopups", (noRepeat = noRepeat + "+" + o)),
            "wheelContainer" == e
              ? (document.getElementById("wheelContainer").style.transform =
                  "translate(100%, 0)")
              : $(`#${e}`).fadeIn();
          try {
            axios.post(
              "https://app.bitespeed.co/database/api/optinTools/impressions",
              {
                id: o,
              },
            );
          } catch (e) {}
        }
      }, 1e3 * t);
    }

    hidePopup = (e) => {
      $(`#${e}`).css("display", "none"),
        "permanentPill" === e &&
          (document.getElementById("pillPopup").style.display = "none"),
        closedPopups.push(e);
    };

    const data = [];

    closeWheel = (e) => {
      document.getElementById("wheelContainer").style.transform =
        "translate(0%, 0)";
    };

    function getSpinTheWheelCode(e, t) {
      const o = [];
      o.push((e + 15) % 360);
      o.push((e + 45) % 360);
      o.push((e + 75) % 360);
      o.push((e + 105) % 360);
      o.push((e + 135) % 360);
      o.push((e + 165) % 360);
      o.push((e + 195) % 360);
      o.push((e + 225) % 360);
      o.push((e + 255) % 360);
      o.push((e + 285) % 360);
      o.push((e + 315) % 360);
      o.push((e + 345) % 360);
      for (let e = 0; e < 12; e++)
        if (o[e] > 300 && o[e] < 330) {
          String(6);
          return (
            (e %= t.data.length),
            {
              code: t.data[e].discountCode,
              text: t.data[e].text,
            }
          );
        }
    }

    function spin(e) {
      const t = [];
      let o;
      const i = `${e + 15}deg`;
      t.push((e + 15) % 360);
      const r = `${e + 45}deg`;
      t.push((e + 45) % 360);
      const a = `${e + 75}deg`;
      t.push((e + 75) % 360);
      const l = `${e + 105}deg`;
      t.push((e + 105) % 360);
      const s = `${e + 135}deg`;
      t.push((e + 135) % 360);
      const n = `${e + 165}deg`;
      t.push((e + 165) % 360);
      const p = `${e + 195}deg`;
      t.push((e + 195) % 360);
      const d = `${e + 225}deg`;
      t.push((e + 225) % 360);
      const f = `${e + 255}deg`;
      t.push((e + 255) % 360);
      const c = `${e + 285}deg`;
      t.push((e + 285) % 360);
      const h = `${e + 315}deg`;
      t.push((e + 315) % 360);
      const u = `${e + 345}deg`;
      t.push((e + 345) % 360);
      const m = `${e}deg`;
      for (let e = 0; e < 12; e++)
        if (t[e] > 300 && t[e] < 330) {
          const t = String(6);
          setTimeout(() => {
            document.getElementById("offerMessage").innerHTML =
              popups[t].props.data[e].discountCode;
          }, 3e3),
            (o = e + 1);
        }
      (document.getElementById("dash-1").style.webkitTransform =
        `rotateZ(${i})`),
        (document.getElementById("dash-2").style.webkitTransform =
          `rotateZ(${r})`),
        (document.getElementById("dash-3").style.webkitTransform =
          `rotateZ(${a})`),
        (document.getElementById("dash-4").style.webkitTransform =
          `rotateZ(${l})`),
        (document.getElementById("dash-5").style.webkitTransform =
          `rotateZ(${s})`),
        (document.getElementById("dash-6").style.webkitTransform =
          `rotateZ(${n})`),
        (document.getElementById("dash-7").style.webkitTransform =
          `rotateZ(${p})`),
        (document.getElementById("dash-8").style.webkitTransform =
          `rotateZ(${d})`),
        (document.getElementById("dash-9").style.webkitTransform =
          `rotateZ(${f})`),
        (document.getElementById("dash-10").style.webkitTransform =
          `rotateZ(${c})`),
        (document.getElementById("dash-11").style.webkitTransform =
          `rotateZ(${h})`),
        (document.getElementById("dash-12").style.webkitTransform =
          `rotateZ(${u})`),
        (document.getElementById("dash-act").style.webkitTransform =
          `rotateZ(${m})`),
        (document.getElementById("wheelLogo").style.webkitTransform =
          `rotateZ(${m})`);
    }

    function wheelLoad(e, t) {
      const { length: o } = e[t].data;
      let i = 0;
      for (let r = 0; r < 12; r++) {
        i === o && (i = 0);
        const a = document.createElement("div");
        a.className = `dash dash${r + 1}`;
        const l = `dash-${r + 1}`;
        (a.id = l),
          document.getElementById("wheelContainer").appendChild(a),
          (document.getElementById(l).style.fontFamily =
            e[t].open.props.offerFont),
          e[t].dashColorLight &&
            (document.getElementById(l).style.color =
              (r + 1) % 2 == 0 ? e[t].dashColorLight : e[t].dashColorDark);
        const s = document.createElement("div");
        (s.innerHTML = `${e[t].data[i].text}`),
          (s.className = "dashInner"),
          document.getElementById(l).appendChild(s),
          window.innerWidth < 767
            ? ((document.getElementById(l).style.top = "85%"),
              (document.getElementById(l).style.left = "12.5vh"))
            : ((document.getElementById(l).style.top = "80%"),
              (document.getElementById(l).style.left = "19vh")),
          (i += 1);
      }
    }
    window.addEventListener("message", (e) => {
      try {
        let o;
        if (e.detail && e.detail.EUCustomer) o = JSON.parse(e.detail.data);
        else if (e.detail && e.detail.isWA) {
          o = JSON.parse(e.detail.data);
          axios.post("https://app.bitespeed.co/fbWebhook", {
            object: "page",
            channel: "WA",
            entry: [
              {
                id: globalWAPageId[0],
                time: new Date().getTime(),
                messaging: [
                  {
                    recipient: {
                      id: globalWAPageId[0],
                    },
                    timestamp: new Date().getTime(),
                    sender: {
                      id: e.detail.phoneNo,
                    },
                    optin: {
                      ref: o.join("."),
                    },
                  },
                ],
              },
            ],
          }),
            axios.post(
              "https://app.bitespeed.co/database/api/optinTools/conversions",
              {
                id: o[0],
              },
            );
        } else o = JSON.parse(e.data);
        try {
          const e = $(`.${o[1]}`).find("#intlPhoneNoContainer");
          e &&
            e.css({
              opacity: 0,
            });
        } catch (e) {}
        if (o[0] && globalPopup[o[0]] && "customerChatWidget" != o[1]) {
          const t = new Date();
          if (
            (t.setFullYear(t.getFullYear() + 1),
            e.detail && e.detail.isWA
              ? (document.cookie =
                  "bitespeedOptedInWA=true;expires=" +
                  t.toUTCString() +
                  ";domain=" +
                  shopDomainStripped +
                  ";path=/")
              : (document.cookie =
                  "bitespeedOptedIn=true;expires=" +
                  t.toUTCString() +
                  ";domain=" +
                  shopDomainStripped +
                  ";path=/"),
            ("masterContainerImageAtTopPhill" != o[1] &&
              "masterContainerImageBehindPhill" != o[1]) ||
              setCookie("displayedPopups", (noRepeat = noRepeat + "+" + o[0])),
            "spinTheWheelContainer" == o[1])
          ) {
            const e = globalPopup[o[0]].completed.props.title.text;
            -1 !== e.indexOf("{OFFER WON}")
              ? setTimeout(() => {
                  const t =
                    e.substr(0, e.indexOf("{OFFER WON}")) +
                    discountText +
                    e.substr(e.indexOf("{OFFER WON}") + 11);
                  $(`#${o[1]}title`).html(t),
                    $(`#${o[1]}title`).css({
                      color: globalPopup[o[0]].completed.props.title.color,
                      "font-family":
                        globalPopup[o[0]].completed.props.title.fontFamily,
                    });
                }, 3e3)
              : ($(`#${o[1]}title`).html(
                  globalPopup[o[0]].completed.props.title.text,
                ),
                $(`#${o[1]}title`).css({
                  color: globalPopup[o[0]].completed.props.title.color,
                  "font-family":
                    globalPopup[o[0]].completed.props.title.fontFamily,
                })),
              setTimeout(() => {
                $(`#${o[1]}text`).html("Discount Code - " + discountCode);
              }, 3e3),
              $(`#${o[1]}text`).css({
                color: globalPopup[o[0]].completed.props.text.color,
                "font-family":
                  globalPopup[o[0]].completed.props.text.fontFamily,
              }),
              $(`#${o[1]}wheelLogo`).attr(
                "src",
                globalPopup[o[0]].completed.props.wheelLogoUrl,
              ),
              $(`#${o[1]}heroLogo`).attr(
                "src",
                globalPopup[o[0]].completed.props.heroLogo,
              ),
              spin(globalDegree);
          } else
            $(`#${o[1]}title`).html(
              globalPopup[o[0]].completed.props.title.text,
            ),
              $(`#${o[1]}title`).css({
                color: globalPopup[o[0]].completed.props.title.color,
                "font-family":
                  globalPopup[o[0]].completed.props.title.fontFamily,
              }),
              "Yes" == globalPopup[o[0]].discountOption
                ? ($(`#${o[1]}subtitle`).html(
                    globalPopup[o[0]].generalSettings.discountCode,
                  ),
                  $(`#${o[1]}subtitle`).css({
                    "font-size":
                      globalPopup[o[0]].completed.props.subtitle.fontSize +
                      "vh",
                  }))
                : $(`#${o[1]}subtitle`).html(
                    globalPopup[o[0]].completed.props.subtitle.text,
                  ),
              $(`#${o[1]}subtitle`).css({
                color: globalPopup[o[0]].completed.props.subtitle.color,
                "font-family":
                  globalPopup[o[0]].completed.props.subtitle.fontFamily,
              }),
              $(`#${o[1]}text`).html(
                globalPopup[o[0]].completed.props.text.text,
              ),
              $(`#${o[1]}text`).css({
                color: globalPopup[o[0]].completed.props.text.color,
                "font-family":
                  globalPopup[o[0]].completed.props.text.fontFamily,
                "font-size":
                  globalPopup[o[0]].completed.props.text.fontSize + "vh",
              }),
              $(`#${o[1]}mainImage`).css({
                "background-image": `url(${
                  globalPopup[o[0]].completed.props.imageUrl
                })`,
              }),
              $(`#${o[1]}popupDiv`).css({
                "background-image": `url(${
                  globalPopup[o[0]].completed.props.imageUrl
                })`,
              }),
              "masterContainerImageBehindPhill" == o[1] &&
                $("#popupImageAtPillClick").css({
                  "background-image": `url(${
                    globalPopup[o[0]].completed.props.imageUrl
                  })`,
                }),
              $(`#${o[1]}textContainer`).css({
                "background-color":
                  globalPopup[o[0]].completed.props.content.backgroundColor,
              });
          try {
            axios.post("https://app.bitespeed.co/redis/conversionFBStatus", {
              fbLoggedInStatus: fbLoggedInStatus,
            });
          } catch (e) {
            console.log("Error posting FB status on s");
          }
        }
      } catch (e) {}
    });
  };
  if (isFb) return FacebookFunc;
  else return whatsappFunc;
};

const getIsMultichannel = async () => {
  try {
    const axiosScript = document.createElement("script");
    axiosScript.setAttribute(
      "src",
      "https://unpkg.com/axios/dist/axios.min.js",
    );
    document.head.appendChild(axiosScript);

    const indexOfwww = location.hostname.indexOf("www");
    const shopDomainStripped =
      indexOfwww === -1
        ? "." + location.hostname
        : location.hostname.substr(indexOfwww + 3);
    const globalShopUrl =
      indexOfwww === -1
        ? location.hostname
        : location.hostname.substr(indexOfwww + 4);
    const res = await axios({
      method: "get",
      url: `https://app.bitespeed.co/database/popups/isMultichannel?shopDomain=${globalShopUrl}`,
    });
    return res.data.isMultichannel;
  } catch (error) {
    console.log(error);
  }
};

var product_id, current_variant;
let bitespeed_popups, currentPopup, currentCW;
let product_id_liquid = product_id,
  variant_id_liquid = current_variant;
class Util {
  static create_UUID = () => {
    try {
      return uuid.v4();
    } catch (err) {
      let dt = new Date().getTime();
      const uuid = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
        /[xy]/g,
        (c) => {
          const r = (dt + Math.random() * 16) % 16 | 0;
          dt = Math.floor(dt / 16);
          return (c == "x" ? r : (r & 0x3) | 0x8).toString(16);
        },
      );
      return uuid;
    }
  };
}

class API {
  constructor() {
    this.baseUrl = "https://rwkcgc85i3.execute-api.us-east-1.amazonaws.com";
    // this.baseUrl = "http://localhost:3000/dev";
  }
  get = async (url, query) => {
    const response = await fetch(`${this.baseUrl}${url}?${query}`);
    return await response.json();
  };
  post = async (url, body) => {
    const response = await fetch(`${this.baseUrl}${url}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(body),
    });
    return await response.json();
  };
}

class BrowserService {
  #browserId = "";
  #shopDomain = "";
  #blockedPopups = [];
  location = null;
  isPhone = window.innerWidth < 508;

  getCookie = (cookie) => {
    const cookieJson = {};
    document.cookie.split(";").forEach((el) => {
      const [k, v] = el.split("=");
      cookieJson[k.trim()] = v;
    });
    return cookieJson[cookie];
  };
  setCookie = (cookie, value, days, minutes = 0) => {
    let expires = "";
    if (days && days > 0) {
      const date = new Date();
      date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
      expires = "; expires=" + date.toUTCString();
    }
    if (minutes && minutes > 0) {
      const date = new Date();
      date.setTime(date.getTime() + minutes * 60 * 1000);
      expires = "; expires=" + date.toUTCString();
    }
    document.cookie = cookie + "=" + (value || "") + expires + "; path=/";
  };
  setBrowserId = (newId = null) => {
    if (newId) this.setCookie("refb", newId, 50);
    let refb = this.getCookie("refb");
    if (!refb || refb?.length == 0) {
      refb = Util.create_UUID();
      this.setCookie("refb", refb, 50);
    }
    this.#browserId = refb;
  };
  #setShopDomain = () => {
    const indexOfwww = location.hostname.indexOf("www");
    const shopDomain =
      indexOfwww === -1
        ? location.hostname
        : location.hostname.substr(indexOfwww + 4);
    this.#shopDomain = shopDomain;
  };
  #setBlockedPopups = () => {
    const blockedPopups = this.getCookie("blockedPopups");
    if (blockedPopups && blockedPopups.length > 0) {
      this.#blockedPopups = blockedPopups.split(",");
    } else {
      this.#blockedPopups = [];
    }
  };
  constructor() {
    this.setBrowserId();
    this.#setShopDomain();
    this.#setBlockedPopups();
    this.getLocation();
  }
  static initCSSDependencies = (CSSDependencies) => {
    try {
      const links = CSSDependencies.map((link) => {
        return `<link rel="stylesheet" href="${link}">`;
      });
      document.head.insertAdjacentHTML("beforeend", links.join(""));
    } catch (e) {
      console.error(
        `Error in Bitespeed Popups: Error while loading CSS dependencies: ${e}`,
      );
    }
  };
  static build = async ({ JSDependencies, CSSDependencies }) => {
    BrowserService.initCSSDependencies(CSSDependencies);
    await BrowserService.initJSDependencies(JSDependencies);
    return new BrowserService();
  };
  getShopDomain = () => {
    return this.#shopDomain;
  };
  getBrowserId = () => {
    return this.#browserId;
  };
  getBlockedPopups = () => {
    return this.#blockedPopups;
  };
  updateBlockedPopups = (popupId) => {
    this.#blockedPopups.push(popupId);
    this.setCookie("blockedPopups", this.#blockedPopups.join(","));
  };

  getLocation = async () => {
    const response = await fetch("https://ipapi.co/json/");
    const data = await response.json();
    this.location = data;
  };

  static initJSDependencies = async (JSDependencies) => {
    try {
      const promises = [];
      for (const jsDependency of JSDependencies) {
        promises.push(
          new Promise((resolve) => {
            const script = document.createElement("script");
            script.type = "text/javascript";
            script.async = true;
            script.defer = true;
            script.id = "";
            if (script.readyState) {
              // IE
              script.onreadystatechange = function () {
                if (
                  script.readyState == "loaded" ||
                  script.readyState == "complete"
                ) {
                  script.onreadystatechange = null;
                  resolve();
                }
              };
            } else {
              // Others
              script.onload = function () {
                resolve();
              };
            }
            script.src = jsDependency;
            document.getElementsByTagName("head")[0].appendChild(script);
          }),
        );
      }
      await Promise.all(promises);
    } catch (E) {
      console.error(
        `Error in Bitespeed Popups: Error while loading JS dependencies: ${e}`,
      );
    }
  };
}

// WebPush Subscription Helpers
function _arrayBufferToBase64(buffer) {
  let binary = "";
  const bytes = new Uint8Array(buffer);
  const len = bytes.byteLength;
  for (let i = 0; i < len; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return window.btoa(binary);
}

function urlBase64ToUint8Array(base64String) {
  const padding = "=".repeat((4 - (base64String.length % 4)) % 4);
  const base64 = (base64String + padding)
    .replace(/\-/g, "+")
    .replace(/_/g, "/");

  const rawData = window.atob(base64);
  const outputArray = new Uint8Array(rawData.length);

  for (let i = 0; i < rawData.length; i++) {
    outputArray[i] = rawData.charCodeAt(i);
  }

  return outputArray;
}

function getBrowserName() {
  let browser = "";

  const userAgent = navigator.userAgent;
  const isChrome = /Chrome/.test(userAgent) && !/Edg/.test(userAgent);
  const isFirefox = /Firefox/.test(userAgent);
  const isSafari = /Safari/.test(userAgent) && !/Chrome/.test(userAgent);
  const isEdge = /Edg/.test(userAgent);

  if (isChrome) {
    browser = "chrome";
    console.log("You are using Google Chrome");
  } else if (isFirefox) {
    browser = "firefox";
    console.log("You are using Mozilla Firefox");
  } else if (isSafari) {
    browser = "safari";
    console.log("You are using Apple Safari");
  } else if (isEdge) {
    browser = "edge";
    console.log("You are using Microsoft Edge");
  } else {
    browser = "other";
    console.log("You are using an unknown or unsupported browser");
  }
  return browser;
}

async function subscribeUserToPush(
  registerImpression,
  setCookie,
  registration,
  popupId,
  popupType,
) {
  const res = await registration.pushManager.getSubscription();
  const sub = res ? res : null;
  if (sub) {
    console.log("User is already subscribed to push notifications", sub);
    return;
  }
  console.log("Service Worker is registered", registration);
  registerImpression(popupId);
  // setCookie(`view ${popupType}`, "true", 10);
  const vapidPublicKey =
    "BMSR8tXlLJOlANI7T5d2zhtzfBgW54OsaNX0K79JoOUlxSZz20vJE3cpmJAUtnpRIyAqEM-rp5h8AhxdyXOL3Ws";
  try {
    const subscription = await registration.pushManager.subscribe({
      userVisibleOnly: true,
      applicationServerKey: urlBase64ToUint8Array(vapidPublicKey),
    });
    console.log("Subscribed to push notifications:", subscription);
    const response = await bitespeed_popups[
      `${popupId}:bitespeed_popup`
    ].handleConversion(
      false,
      undefined,
      undefined,
      undefined,
      undefined,
      {},
      undefined,
      undefined,
      "webPush",
      {
        endpoint: subscription.endpoint,
        keys: {
          auth: _arrayBufferToBase64(subscription.getKey("auth")),
          p256dh: _arrayBufferToBase64(subscription.getKey("p256dh")),
        },
        browser: getBrowserName(),
      },
    );

    const contactIdBitespeed =
      response?.results?.[1]?.value?.["id"] || response?.results?.[1]?.["id"];
    bitespeed_popups[`${popupId}:bitespeed_popup`].browserService.setCookie(
      "contactIdBitespeed",
      contactIdBitespeed,
      1000,
    );
    bitespeed_popups[`${popupId}:bitespeed_popup`].browserService.setCookie(
      "bspdPushId",
      subscription.endpoint,
      1000,
    );

    // setSubscription({
    //   endpoint: subscription.endpoint,
    //   keys: {
    //     auth: _arrayBufferToBase64(subscription.getKey("auth")),
    //     p256dh: _arrayBufferToBase64(subscription.getKey("p256dh")),
    //   },
    // });
    // setSendingNotification(true);
  } catch (error) {
    if (Notification.permission === "denied") {
      console.log("Permission for notifications was denied");
    }
    console.error("Error subscribing to push notifications:", error);
  }
}

class PopupBS {
  #popupHtml = {};
  #secondaryPopupHtml = {};
  popupId = "";
  popupType = "";
  #popupBehaviour = "";
  #popupTargeting = "";
  browserService = null;
  #backendService = null;
  productId = "";
  variantId = "";
  popupTrigger = "";

  constructor(popupJson, browserService, backendService, view = "OpenView") {
    this.popupJson = popupJson;
    this.#popupHtml =
      !popupJson.type.includes("chat") &&
      !popupJson.type.includes("stw") &&
      !popupJson.type.includes("webPush")
        ? JSON.parse(this?.popupJson?.popupHtml)[view]
        : popupJson.type.includes("chat")
          ? JSON.parse(this?.popupJson?.popupHtml)["popupHtmlTop"]
          : this?.popupJson?.popupHtml;
    this.#secondaryPopupHtml = popupJson.type.includes("chat")
      ? JSON.parse(this?.popupJson?.popupHtml)["popupHtmlBottom"]
      : null;
    this.currentView = view;
    this.behaviour = popupJson.behaviour;
    this.popupId = popupJson.id;
    this.popupType = popupJson.type;
    this.#popupBehaviour = popupJson.behaviour;
    this.#popupTargeting = popupJson.targeting;
    this.discountType = this.getDiscountType(popupJson?.unlayerJson);
    this.DiscountCodeValuePercentage = this.findfeildInJson(
      popupJson?.unlayerJson,
      "DiscountCodeValuePercentage",
    );
    this.DiscountCode = this.findfeildInJson(
      popupJson?.unlayerJson,
      "DiscountCode",
    );
    this.browserService = browserService;
    this.#backendService = backendService;
  }
  nextView = (discountCode = "__ __ __ __") => {
    document.querySelector(".u-popup-container")?.remove();
    document.querySelector(`#popup-iframe-open-${this.popupId}`)?.remove();
    //Check if complete view is present or any intermediate views
    const popupHtml = JSON.parse(this.popupJson.popupHtml);
    if (popupHtml["IntermediateView"] && this.currentView == "OpenView") {
      this.#popupHtml = popupHtml["IntermediateView"];
      this.currentView = "IntermediateView";
      this.show();
    } else if (
      popupHtml["CompletedView"] &&
      (this.currentView == "IntermediateView" || this.currentView == "OpenView")
    ) {
      // for notifyme options... don't open this card... optionally for now at least
      // if(this.popupTrigger === 'back_in_stock') return // remove if not needed

      this.#popupHtml = popupHtml["CompletedView"];
      this.currentView = "CompletedView";
      this.show(discountCode, false);
    }
  };

  showSecondaryHtml = () => {
    if (this.#secondaryPopupHtml) {
      const iframe = document.createElement("iframe");
      iframe.id = "chat-popup-iframe-bottom";
      iframe.title = "BiteSpeed Popup Bottom";
      iframe.srcdoc = this.#secondaryPopupHtml;
      iframe.style.cssText = `
      position: fixed;
      ${
        !this.popupType.includes("chat")
          ? "top: 0;"
          : `bottom : ${parseInt(
              this.popupJson.unlayerJson?.Widget?.[
                "Use different icon position for mobile"
              ].selected && this.browserService?.isPhone
                ? this.popupJson.unlayerJson?.Widget?.["Mobile Icon position"]
                    .attributes.bottom
                : this.popupJson.unlayerJson?.Widget?.["Icon position"]
                    .attributes.bottom,
            )}px;`
      }
      right: 0;
      ${
        this.popupJson.unlayerJson?.Widget?.["Icon position"]?.selected ===
        "Left"
          ? "left: 0;"
          : ""
      }

      ${
        this.popupJson.unlayerJson?.Widget?.[
          "Use different icon position for mobile"
        ].selected && this.browserService?.isPhone
          ? this.popupJson.unlayerJson?.Widget?.["Mobile Icon position"]
              .selected === "Left"
            ? "left: 0; right: auto;"
            : "right: 0; left: auto;"
          : ""
      }

      height: 45px;
      margin-right: ${
        this.popupJson.unlayerJson?.Widget?.["Icon position"]?.selected ===
        "Right"
          ? `${this.popupJson.unlayerJson?.Widget?.["Icon position"]?.attributes?.distance}px`
          : "auto"
      }; margin-left: ${
        this.popupJson.unlayerJson?.Widget?.["Icon position"]?.selected ===
        "Left"
          ? `${this.popupJson.unlayerJson?.Widget?.["Icon position"]?.attributes?.distance}px`
          : "auto"
      };
      ${
        this.popupJson.unlayerJson?.Widget?.[
          "Use different icon position for mobile"
        ].selected && this.browserService?.isPhone
          ? this.popupJson.unlayerJson?.Widget?.["Mobile Icon position"]
              .selected === "Left"
            ? `margin-left : ${this.popupJson.unlayerJson?.Widget?.["Mobile Icon position"].attributes?.distance}px; margin-right: auto;`
            : `margin-right : ${this.popupJson.unlayerJson?.Widget?.["Mobile Icon position"].attributes?.distance}px; margin-left: auto;`
          : ""
      }
      z-index: ${Shopify.shop === "ugaoo-store.myshopify.com" ? 9 : 999999999};
      background-color: ${
        !this.popupType.includes("chat") ? "rgba(0, 0, 0, 0.5);" : ";"
      }
      border: none;
      `;

      document.body.appendChild(iframe);

      iframe.onload = () => {
        const innerDoc =
          iframe.contentDocument || iframe.contentWindow.document;
        const widgetPreview = innerDoc.getElementById("WidgetPreview");
        iframe.style.width =
          Math.ceil(widgetPreview.getBoundingClientRect().width) + "px";
        if (
          widgetPreview &&
          this.popupJson.unlayerJson?.Widget?.[
            "Use different icon position for mobile"
          ].selected &&
          this.browserService?.isPhone
        ) {
          widgetPreview.style.float =
            this.popupJson.unlayerJson?.Widget?.["Mobile Icon position"]
              .selected === "Left"
              ? "left"
              : "right";
        }
      };
    }
  };

  close = () => {
    const id = this.popupId;

    const openIframe = document.querySelector(`#popup-iframe-open-${id}`);
    const completedIframe = document.querySelector(
      `#popup-iframe-completed-${id}`,
    );

    if (openIframe) openIframe.remove();
    if (completedIframe) completedIframe.remove();

    // if(openIframe) openIframe.style.left = '-100%'
    // if(completedIframe) openIframe.style.left = '-100%'

    this.currentView = "OpenView";
  };

  show = async (discountCode, showImpression = true, productDetails = {}) => {
    // for notifyme button
    if (
      discountCode === "" &&
      productDetails.popupTrigger &&
      productDetails.productId &&
      productDetails.variantId
    ) {
      console.log(
        "SHOW GOT CALLED",
        this.productId,
        this.variantId,
        this.popupTrigger,
        "DATA FROM ARGS",
        productDetails,
      );
      this.productId = productDetails.productId || "";
      this.variantId = productDetails.variantId || "";
      this.popupTrigger = productDetails.popupTrigger || "";
      console.log(
        "SHOW CALL ENDED",
        this.productId,
        this.variantId,
        this.popupTrigger,
        "DATA FROM ARGS",
        productDetails,
      );
    }

    if (this.popupType.includes("webPush")) {
      console.log("webPushhhh");
      if ("serviceWorker" in navigator && "PushManager" in window) {
        console.log("Service Worker and Push is supported");
        const registration = await navigator.serviceWorker.register(
          "/apps/bitespeed/worker.js",
        );
        const registerImpression = this.#backendService.registerImpression;
        const setCookie = this.browserService.setCookie;
        const popupId = this.popupId;
        const popupType = this.popupType;

        var serviceWorker;
        if (registration.installing) {
          serviceWorker = registration.installing;
          // console.log('Service worker installing');
        } else if (registration.waiting) {
          serviceWorker = registration.waiting;
          // console.log('Service worker installed & waiting');
        } else if (registration.active) {
          serviceWorker = registration.active;
          // console.log('Service worker active');
        }

        if (serviceWorker) {
          console.log("sw current state", serviceWorker.state);
          if (serviceWorker.state == "activated") {
            //If push subscription wasnt done yet have to do here
            console.log("sw already activated - Do watever needed here", {
              registerImpression,
              registration,
              setCookie,
              popupId,
              popupType,
            });
            await subscribeUserToPush(
              registerImpression,
              setCookie,
              registration,
              popupId,
              popupType,
            );
          }

          serviceWorker.addEventListener("statechange", async function (e) {
            console.log("sw statechange : ", e.target.state);
            if (e.target.state == "activated") {
              // use pushManger for subscribing here.
              console.log(
                "Just now activated. now we can subscribe for push notification",
                {
                  registerImpression,
                  registration,
                  setCookie,
                  popupId,
                  popupType,
                },
              );
              await subscribeUserToPush(
                registerImpression,
                setCookie,
                registration,
                popupId,
                popupType,
              );
            }
          });
        }
        // get subscription
        const subscription = await registration.pushManager.getSubscription();
        console.log({ subscription });
      }
    } else {
      // Todo AJ: - No Need to remove visual PopupBS if this popup is a chat popup
      if (!this.popupType.includes("chat") || !this.popupType.includes("stw"))
        document?.querySelector(".u-popup-container")?.remove();
      this.#popupHtml = this.#popupHtml.replace(/\\n/g, "");
      this.#popupHtml = this.#popupHtml.replace(/\`/g, "");
      // this.#popupHtml = this.#popupHtml.replace(/\"/g, "'");
      if (discountCode) {
        this.#popupHtml = this.#popupHtml.replace(
          /{{DISCOUNT_CODE}}/g,
          discountCode,
        );
      }

      if (
        this.#popupHtml &&
        (this.popupType.includes("chat") || this.popupType.includes("stw"))
      ) {
        const iframe = document.createElement("iframe");
        iframe.title = "BiteSpeed Popup";
        iframe.id = this.popupType.includes("chat")
          ? "chat-popup-iframe"
          : this.popupType.includes("stw")
            ? "stw-popup-iframe"
            : "popup-iframe";
        iframe.srcdoc = this.#popupHtml;
        iframe.style.cssText = `
        position: fixed;
        ${
          !this.popupType.includes("chat")
            ? "top: 0;"
            : `bottom : ${
                parseInt(
                  this.popupJson.unlayerJson?.Widget?.["Icon position"]
                    .attributes.bottom,
                ) + 64
              }px;`
        }
        right: 0;
        ${
          this.popupJson.unlayerJson?.Widget?.["Icon position"]?.selected ===
          "Left"
            ? "left: 0;"
            : ""
        }
        width: ${
          !this.popupType.includes("chat")
            ? "100%;"
            : !this.browserService?.isPhone
              ? "380px;"
              : "100%;"
        }
        height: ${!this.popupType.includes("chat") ? "100%;" : "500px;"}
        margin-right: ${
          this.browserService?.isPhone
            ? "0px"
            : this.popupJson.unlayerJson?.Widget?.["Icon position"]
                  ?.selected === "Right"
              ? `${this.popupJson.unlayerJson?.Widget?.["Icon position"]?.attributes?.distance}px`
              : "auto"
        }; margin-left: ${
          this.browserService?.isPhone
            ? "0px"
            : this.popupJson.unlayerJson?.Widget?.["Icon position"]
                  ?.selected === "Left"
              ? `${this.popupJson.unlayerJson?.Widget?.["Icon position"]?.attributes?.distance}px`
              : "auto"
        };
        z-index: 999999999;
        background-color: ${
          !this.popupType.includes("chat") ? "rgba(0, 0, 0, 0.5);" : ";"
        }
        border: none;
        display: ${!this.popupType.includes("chat") ? "default;" : "none;"}
      `;

        this.showSecondaryHtml();
        iframe.addEventListener("load", () =>
          postRenderOperations(this.popupId),
        );
        document.body.appendChild(iframe);

        if (showImpression) {
          this.#backendService.registerImpression(this.popupId);
        }
        // only not for notify me buttons
        this.browserService.setCookie(
          `view ${this.popupType}`,
          this.popupTrigger === "back_in_stock" ? "false" : "true",
          10,
        );
      } else if (this.#popupHtml) {
        if (this.currentView == "OpenView") {
          const popupHtml = JSON.parse(this.popupJson.popupHtml);

          let openViewIframe = document.querySelector(
            `popup-iframe-open-${this.popupId}`,
          );
          if (!openViewIframe) {
            openViewIframe = document.createElement("iframe");
            openViewIframe.id = "popup-iframe-open-" + this.popupId;
            openViewIframe.srcdoc = popupHtml["OpenView"];
            openViewIframe.style.cssText = `
              position: fixed;
              top: 0;
              width: 100%;
              height: 100%;
              z-index: 999999999;
              background-color: rgba(0, 0, 0, 0.5);
              border: none;
              left: -1000%;
            `;
          }

          let completedViewIframe = document.querySelector(
            `popup-iframe-completed-${this.popupId}`,
          );
          if (!completedViewIframe) {
            completedViewIframe = document.createElement("iframe");
            completedViewIframe.id = `popup-iframe-completed-${this.popupId}`;
            completedViewIframe.srcdoc = popupHtml["CompletedView"];
            completedViewIframe.style.cssText = `
              position: fixed;
              top: 0;
              width: 100%;
              height: 100%;
              z-index: 999999999;
              background-color: rgba(0, 0, 0, 0.5);
              border: none;
              left: -1000%;
            `;
          }

          const displayPopup = (event) => {
            document.getElementById(
              "popup-iframe-open-" + this.popupId,
            ).style.left = 0;
            if (showImpression) {
              this.#backendService.registerImpression(this.popupId);
            }
            // only not for notify me buttons
            this.browserService.setCookie(
              `view ${this.popupType}`,
              this.popupTrigger === "back_in_stock" ? "false" : "true",
              10,
            );

            // HACK: removing event listener after load to prevent error
            event.target.removeEventListener("load", displayPopup);
            postRenderOperations(this.popupId);
          };
          openViewIframe.addEventListener("load", displayPopup);

          const popupId = this.popupId;

          openViewIframe.onload = function () {
            const popupIframe = openViewIframe.contentDocument;

            const nextViewButton = popupIframe.querySelector(
              ".bitespeedNextButton",
            );
            const crossButton = popupIframe.querySelector(".u-close-button");

            if (nextViewButton)
              nextViewButton.setAttribute("data-popupid", popupId);
            if (crossButton) crossButton.setAttribute("data-popupid", popupId);
          };

          completedViewIframe.onload = function () {
            const popupIframe = completedViewIframe.contentDocument;

            const copyDiscountButton =
              popupIframe.querySelector("#STWDicountBoxCopy");
            const crossButton = popupIframe.querySelector(".u-close-button");

            if (copyDiscountButton)
              copyDiscountButton.setAttribute("data-popupid", popupId);

            if (crossButton) crossButton.setAttribute("data-popupid", popupId);
          };

          document.body.appendChild(openViewIframe);
          document.body.appendChild(completedViewIframe);
        } else {
          const completedViewIframe = document.getElementById(
            `popup-iframe-completed-${this.popupId}`,
          );
          const innerDoc =
            completedViewIframe.contentDocument ||
            completedViewIframe.contentWindow.document;
          const discountCodeDiv = innerDoc.getElementById("STWDicountBox");

          if (discountCodeDiv) {
            // Use the replace method to replace a string
            // const newSrcdocContent = srcdocContent.replace(
            //   /{{DISCOUNT_CODE}}/g,
            //   discountCode
            // );

            discountCodeDiv.innerHTML = discountCode;
          }

          completedViewIframe.style.left = 0;
        }
      }
    }
  };

  getDiscountType = (obj) => {
    if (obj && obj.DiscountCodeType) {
      return obj.DiscountCodeType;
    }
    for (const key in obj) {
      if (typeof obj[key] === "object") {
        const result = this.getDiscountType(obj[key]);
        if (result) {
          return result;
        }
      }
    }
    return null;
  };

  findfeildInJson = (obj, feild) => {
    if (obj && obj[feild]) {
      return obj[feild];
    }
    for (const key in obj) {
      if (typeof obj[key] === "object") {
        const result = this.findfeildInJson(obj[key], feild);
        if (result) {
          return result;
        }
      }
    }
    return null;
  };

  passWhereCondition = (Where) => {
    let showPages = false;
    let notShowPages = true;
    let currentUrl = window.location.href;
    // remove query params from url
    currentUrl = currentUrl.split("?")[0].replace(/\/+$/, "");

    // Pages to show condition
    if (Where["Pages to show"].selected === "All pages") {
      showPages = true;
    } else if (Where["Pages to show"].selected === "Specific pages") {
      const urls = Where["Pages to show"].attributes;
      urls.forEach((url) => {
        let mainURL = (url.url + "").replace(/\/+$/, "");
        if (url.type === "Containing" && currentUrl.includes(mainURL)) {
          showPages = true;
        } else if (url.type === "Exactly Matching" && currentUrl === mainURL) {
          showPages = true;
        }
      });
    }

    // Pages NOT to show condition
    if (Where["Pages NOT to show"].selected === "All pages") {
      notShowPages = true;
    } else if (Where["Pages NOT to show"].selected === "Specific pages") {
      const urls = Where["Pages NOT to show"].attributes;
      urls.forEach((url) => {
        let mainURL = (url.url + "").replace(/\/+$/, "");
        if (url.type === "Containing" && currentUrl.includes(mainURL)) {
          notShowPages = false;
        } else if (url.type === "Exactly Matching" && currentUrl === mainURL) {
          notShowPages = false;
        }
      });
    }

    // Devices to show condition
    if (Where["Devices"].selected === "All devices") {
      return showPages && notShowPages;
    } else if (Where["Devices"].selected === "Desktop only") {
      return showPages && notShowPages && !this.browserService?.isPhone;
    } else if (Where["Devices"].selected === "Mobile only") {
      return showPages && notShowPages && this.browserService?.isPhone;
    }
  };

  isExistingCustomer() {
    const existingCustomer = this.browserService.getCookie(
      `view ${this.popupType}`,
    );
    if (existingCustomer) {
      return true;
    } else {
      return false;
    }
  }

  passWhoCondition = (Who) => {
    let result = true;
    if (Who) {
      if (Who["By Visitor"]) {
        // don't continue for notify me buttons/ back in stock feature
        if (this.behaviour.When.selected === "When product is out of stock") {
          return true;
        }

        if (Who["By Visitor"].selected === "Dont show to existing customers") {
          result = !this.isExistingCustomer();
        }
      }
      // if (Who["By Location"]) {
      //   const country = this.browserService?.location?.country_name;

      //   if (Who["By Location"].selected === "Dont show to specific countries") {
      //     if (Who["By Location"].attributes.includes(country)) {
      //       result = false;
      //     }
      //   } else if (
      //     Who["By Location"].selected === "Show to specific countries"
      //   ) {
      //     if (!Who["By Location"].attributes.includes(country)) {
      //       result = false;
      //     }
      //   }
      // }
    }
    return result;
  };

  shouldShowForThisCountry = (Who) => {
    const selected = Who["By Location"].selected;
    if (selected.includes("Show to all countries")) return true;

    // user's timezone
    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    const attributes = Who["By Location"].attributes; // getting the countries list

    for (let i = 0; i < countryMappedTZ.length; i++) {
      if (
        attributes.includes(countryMappedTZ[i].country) &&
        countryMappedTZ[i].timezones.includes(timezone)
      ) {
        if (selected.includes("Show to specific countries")) return true;

        if (selected.includes("Dont show to specific countries")) return false;
      }
    }

    return false;
  };

  shouldShowForIndianStates = async (Who) => {
    const selected = String(Who["By Location"].selected).toLowerCase();
    if (selected.includes("show to all indian states")) {
      // TODO_sobhan: check here if the user lies inside Indian or not...
      // NOT THAT IMP
      return true;
    }

    return new Promise((resolve, _reject) => {
      const stateAttributes = Who["By Location"].attributes; // getting the states list
      const lowecasedStates = stateAttributes.map((state) =>
        state.toLowerCase(),
      );

      // first check for local storage
      const localData = localStorage.getItem("userLiesInState");
      if (
        localData &&
        localData.includes("matchedState") &&
        localData.includes("expiryDate")
      ) {
        const data = JSON.parse(localData);
        const expiryDate = new Date(data.expiryDate);
        const currentDate = new Date();

        if (currentDate < expiryDate && data.matchedState) {
          return resolve(
            lowecasedStates.includes(String(data.matchedState).toLowerCase()),
          );
        }
      }

      // Wrap the geolocation and API call in a Promise
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          async (position) => {
            const latitude = position.coords.latitude;
            const longitude = position.coords.longitude;

            try {
              // Send an API request to check if the user lies in the Indian states
              const response =
                await this.#backendService.checkIfUserLiesInStates(
                  stateAttributes,
                  [longitude, latitude],
                );
              let isUserInState = response.result;
              let matchedState = response.matchedState;
              let expiryDate = response.expiryDate;

              if (isUserInState === true) {
                // if the user lies in any of these states
                // we are going to cache the data to local storage
                // so that we don't have to make the API call again
                localStorage.setItem(
                  "userLiesInState",
                  JSON.stringify({
                    matchedState,
                    expiryDate:
                      expiryDate ||
                      new Date(
                        Date.now() + 15 * 24 * 60 * 60 * 1000, // 15 days from now
                      ).toISOString(),
                  }),
                );

                if (
                  selected.includes("show to specific indian states") &&
                  !selected.includes("don't")
                )
                  resolve(true);
                if (selected.includes("don't show to specific indian states"))
                  resolve(false);
              } else {
                if (
                  selected.includes("show to specific indian states") &&
                  !selected.includes("don't")
                )
                  resolve(false);
                if (selected.includes("don't show to specific indian states"))
                  resolve(true);
              }
            } catch (error) {
              resolve(false);
            }
          },
          (error) => {
            resolve(false);
          },
        );
      } else {
        resolve(true);
      }
    });
  };

  shouldShowForCurrentRegion = async (Who) => {
    if (Who && Who["By Location"]) {
      const selected = String(Who["By Location"].selected || "").toLowerCase();

      if (selected.includes("countries")) {
        return this.shouldShowForThisCountry(Who);
      } else if (selected.includes("states")) {
        return await this.shouldShowForIndianStates(Who);
      }
    }

    return true;
  };

  addPopupTrigger = async () => {
    return await new Promise(async (showPopup) => {
      if (
        this.passWhereCondition(this.behaviour.Where) &&
        this.passWhoCondition(this.behaviour.Who) &&
        (await this.shouldShowForCurrentRegion(this.behaviour.Who))
      ) {
        if (this.behaviour.When.selected === "When product is out of stock") {
          initNotifyFrontendService(
            this.popupId,
            this.behaviour.When.attributeText,
          );

          showPopup(false);
        }

        if (this.behaviour.When.selected === "Show immediately on page load")
          showPopup(true);
        if (this.behaviour.When.selected === "X seconds after page load") {
          setTimeout(() => {
            showPopup(true);
          }, this.behaviour.When.attributes * 1000);
        }
        if (this.behaviour.When.selected === "After scrolling X% of the page") {
          window.addEventListener("scroll", () => {
            const scrollTop = document.documentElement.scrollTop;
            const docHeight = Math.max(
              document.body.clientHeight,
              document.body.scrollHeight ? document.body.scrollHeight : 0,
            );
            const winHeight = document.documentElement.clientHeight;
            const scrollPercent = scrollTop / (docHeight - winHeight);
            const scrollPercentRounded = Math.round(scrollPercent * 100);
            if (scrollPercentRounded >= this.behaviour.When.attributes) {
              showPopup(true);
            }
          });
        }
        if (this.behaviour.When.selected === "When user is leaving a page") {
          if (this.browserService?.isPhone) {
            showPopup(true);
          } else {
            window.addEventListener("mouseout", (e) => {
              if (e.clientY < 0) {
                showPopup(true);
              }
            });
          }
        }
        if (this.behaviour.When.selected === "afterClick") {
          window.addEventListener("click", (e) => {
            showPopup(true);
          });
        }
      }
    });
  };

  handleClose = () => {
    //TODO
  };
  handleConversion = async (
    getDiscount,
    country,
    phone,
    email,
    name,
    requiredDiscount,
    listId,
    staticDiscount,
    popupType = "",
    webPushSubscription = null,
  ) => {
    const response = await this.#backendService.registerConversion(
      this.popupId,
      getDiscount,
      country?.replace(" ", "")?.replace("+", ""),
      phone,
      email,
      name,
      requiredDiscount,
      typeof listId === "number"
        ? listId
        : typeof listId === "string" && listId != ""
          ? Number.parseInt(listId)
          : null,
      staticDiscount,
      popupType,
      webPushSubscription,
      this.productId,
      this.variantId,
      this.popupTrigger,
    );
    return response;
  };
  preloadDiscount = async (getDiscount, requiredDiscount) => {
    await this.#backendService.getDiscountCode(
      this.popupId,
      getDiscount,
      requiredDiscount,
    );
  };
}

class STWPopup extends PopupBS {
  constructor(popupJson, browserService, backendService) {
    super(popupJson, browserService, backendService);
  }
}
class VisualPopup extends PopupBS {
  constructor(popupJson, browserService, backendService) {
    super(popupJson, browserService, backendService);
  }
}

class ChatWidgetPopup extends PopupBS {
  constructor(popupJson, browserService, backendService) {
    super(popupJson, browserService, backendService);
  }
}

class WebPushPopup extends PopupBS {
  constructor(popupJson, browserService, backendService) {
    super(popupJson, browserService, backendService);
  }
}

class PopupFactory {
  browserService = null;
  #backendService = null;

  #getPopup = (popupJson) => {
    switch (popupJson.type) {
      case "stw":
        return new STWPopup(
          popupJson,
          this.browserService,
          this.#backendService,
        );
      case "visual popup":
        return new VisualPopup(
          popupJson,
          this.browserService,
          this.#backendService,
        );
      case "chat widget":
        return new ChatWidgetPopup(
          popupJson,
          this.browserService,
          this.#backendService,
        );
      case "webPush":
        return new WebPushPopup(
          popupJson,
          this.browserService,
          this.#backendService,
        );
    }
  };

  constructor(browserService, backendService) {
    this.browserService = browserService;
    this.#backendService = backendService;
  }

  // logTestMetadata = async () => {
  //   const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;

  //   await axios({
  //     method: "POST",
  //     url: "https://2lkkwxk9b6.execute-api.us-east-1.amazonaws.com/sms/templates",
  //     body: JSON.stringify({
  //       name: "BITESPEED_POPUP_LOGGER",
  //       timezone: timezone,
  //       language: navigator.language,
  //       platform: navigator.platform,
  //     }),
  //   });
  // };

  getPopups = (popupJsons) => {
    const popups = {};
    const blockedPopups = this.browserService.getBlockedPopups();
    for (const popupJson of popupJsons) {
      const popupId = popupJson.id;
      if (blockedPopups.includes(popupId)) {
        continue;
      }
      popups[`${popupId}:bitespeed_popup`] = this.#getPopup(popupJson);
    }
    return popups;
  };
}

/**
 * this method is the exact copy of the method in the PopupBS class
 */
let globalBackendService = null;
const shouldShowForIndianStates = async (
  Who,
  checkIfUserLiesInStates, // NOTE: this is a function
) => {
  const selected = String(Who["By Location"].selected).toLowerCase();
  if (selected.includes("show to all indian states")) {
    // TODO_sobhan: check here if the user lies inside Indian or not...
    // NOT THAT IMP
    return true;
  }

  return new Promise((resolve, _reject) => {
    const stateAttributes = Who["By Location"].attributes; // getting the states list
    const lowecasedStates = stateAttributes.map((state) => state.toLowerCase());

    // first check for local storage
    const localData = localStorage.getItem("userLiesInState");
    if (
      localData &&
      localData.includes("matchedState") &&
      localData.includes("expiryDate")
    ) {
      const data = JSON.parse(localData);
      const expiryDate = new Date(data.expiryDate);
      const currentDate = new Date();

      if (currentDate < expiryDate && data.matchedState) {
        return resolve(
          lowecasedStates.includes(String(data.matchedState).toLowerCase()),
        );
      }
    }

    // Wrap the geolocation and API call in a Promise
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        async (position) => {
          const latitude = position.coords.latitude;
          const longitude = position.coords.longitude;

          try {
            // Send an API request to check if the user lies in the Indian states
            const response = await checkIfUserLiesInStates(stateAttributes, [
              longitude,
              latitude,
            ]);
            let isUserInState = response.result;
            let matchedState = response.matchedState;
            let expiryDate = response.expiryDate;

            if (isUserInState === true) {
              // if the user lies in any of these states
              // we are going to cache the data to local storage
              // so that we don't have to make the API call again
              localStorage.setItem(
                "userLiesInState",
                JSON.stringify({
                  matchedState,
                  expiryDate:
                    expiryDate ||
                    new Date(
                      Date.now() + 15 * 24 * 60 * 60 * 1000, // 15 days from now
                    ).toISOString(),
                }),
              );

              if (
                selected.includes("show to specific indian states") &&
                !selected.includes("don't")
              )
                resolve(true);
              if (selected.includes("don't show to specific indian states"))
                resolve(false);
            } else {
              if (
                selected.includes("show to specific indian states") &&
                !selected.includes("don't")
              )
                resolve(false);
              if (selected.includes("don't show to specific indian states"))
                resolve(true);
            }
          } catch (error) {
            resolve(false);
          }
        },
        (error) => {
          resolve(false);
        },
      );
    } else {
      resolve(true);
    }
  });
};

class BackendService {
  #shopDomain = "";
  #browserId = "";
  #shopUrl = "";

  constructor({ shopDomain, browserId }) {
    this.#shopDomain = shopDomain;
    this.#browserId = browserId;
    this.API = new API();
  }
  getStorePopups = async () => {
    try {
      let getCountryCode = true;
      countryCodeBitespeed = getCookieGlobal("countryCodeBS");
      if (countryCodeBitespeed && countryCodeBitespeed !== "")
        getCountryCode = false;
      //change_this
      const shopUrl = Shopify.shop;
      const response = await this.API.get(
        "/getPopups",
        `shopUrl=${shopUrl}&getCountryCode=${getCountryCode}`,
      );

      let storePopupItems = response?.storePopups?.Items;
      if (Array.isArray(storePopupItems) && storePopupItems.length > 0) {
        let foundStableStateBasedPopup = false;

        storePopupItems = storePopupItems.sort(async (a, b) => {
          const showForSpecificState = a.behaviour?.Who?.[
            "By Location"
          ]?.selected
            ?.toLowerCase()
            .includes("states");

          if (showForSpecificState) {
            return -1;
          } else if (!showForSpecificState) {
            return 1;
          }
          return 0;
        });

        try {
          // itterate over all the popups and check if any popup is stable state based
          for (const popup of storePopupItems) {
            const isStatewisePopup = popup.behaviour.Who["By Location"].selected
              ?.toLowerCase()
              .includes("states");

            if (isStatewisePopup && !foundStableStateBasedPopup) {
              const showForState = await shouldShowForIndianStates(
                popup.behaviour.Who,
                this.checkIfUserLiesInStates,
              );

              if (showForState) {
                foundStableStateBasedPopup = true;
              }
            }
          }
        } catch (err) {
          console.log("SOMETHIND WENT WRONG", err);
        }

        if (foundStableStateBasedPopup) {
          // remove country based popups
          storePopupItems = storePopupItems.filter(
            (popup) =>
              !popup.behaviour.Who["By Location"].selected
                ?.toLowerCase()
                .includes("countries"),
          );
        }
      }

      countryCodeBitespeed =
        response.callingCountryCode || countryCodeBitespeed;
      if (countryCodeBitespeed && countryCodeBitespeed !== "") {
        setCookieGlobal("countryCodeBS", countryCodeBitespeed, 30);
      }
      if (response && response.shopUrl) {
        this.#shopUrl = response.shopUrl;
      }
      if (response && response.storePopups && storePopupItems) {
        return storePopupItems;
      }
    } catch (e) {
      console.error(
        `Error in Bitespeed Popups: Error while fetching popups: ${e}`,
      );
    }
  };
  registerImpression = (popupId) => {
    this.API.post("/impressionsInvoker", {
      type: "impression",
      popupId,
      browserId: this.#browserId,
      shopUrl: this.#shopUrl,
      createdAt: new Date().toISOString(),
      impressionAndConversionId: Util.create_UUID(),
      origin: window.location.href,
    });
  };
  registerConversion = async (
    popupId,
    getDiscount,
    country,
    phone,
    email,
    name,
    requiredDiscount,
    listId,
    staticDiscount,
    popupType = "",
    webPushSubscription = null,
    productId = product_id_liquid || "",
    variantId = variant_id_liquid || "",
    popupTrigger = "",
  ) => {
    try {
      let requestBody = {
        type: "conversion",
        popupId,
        browserId: this.#browserId,
        shopUrl: this.#shopUrl,
        getDiscount,
        requiredDiscount,
        country,
        phone,
        email,
        name,
        createdAt: new Date().toISOString(),
        listId,
        staticDiscount,
        impressionAndConversionId: Util.create_UUID(),
        origin: window.location.href,
        meta: {
          productId,
          variantId,
        },
        popupTrigger,
      };
      if (popupType === "webPush") {
        requestBody = {
          ...requestBody,
          webPushSubscription,
          popupType,
        };
      }
      console.log({ requestBody });
      const res = await this.API.post("/preConversionHandler", requestBody);
      return res;
    } catch (e) {
      console.error(`Error in registering conversion: ${e}`);
    }
  };
  getDiscountCode = async (popupId, getDiscount, requiredDiscount) => {
    try {
      const res = await this.API.post("/getDiscountHandler", {
        popupId,
        browserId: this.#browserId,
        shopUrl: this.#shopUrl,
        getDiscount,
        requiredDiscount,
      });
      const discountCode = findDiscountCodeInResponse(res)?.[0]?.code;

      // Set cookie for discount code for 5 minutes
      bitespeed_popups[`${popupId}:bitespeed_popup`].browserService.setCookie(
        `${popupId}:discountCode`,
        discountCode,
        0,
        5,
      );
      return res;
    } catch (e) {
      console.error(`Error in fetching discount: ${e}`);
    }
  };
  checkIfUserLiesInStates = async (allowedStates, userCoords) => {
    try {
      const res = await this.API.post("/checkUserLiesInState", {
        allowedStates,
        userCoords,
      });

      return res;
    } catch (e) {
      console.error(`Error in checking user lies in states: ${e}`);
    }
  };
}
const getJSDependencies = () => {
  console.log(Shopify.shop);
  if (Shopify.shop === "core-ellementry.myshopify.com") return [];
  console.log("returning js dependencies");
  return [
    // 'https://unpkg.com/axios/dist/axios.min.js',
    // 'https://cdn.bitespeed.co/whatsapp-snippets/intlTelInput.min.js',
    // 'https://cdn.bitespeed.co/whatsapp-snippets/utils.js',
    "https://cdnjs.cloudflare.com/ajax/libs/uuid/8.3.2/uuid.min.js",
  ];
};
const getCSSDependencies = () => {
  if (BrowserService.isPhone) {
    return [
      // 'https://cdn.bitespeed.co/snippets/bitespeed-popup-mob-min.css',
      // 'https://cdn.bitespeed.co/whatsapp-snippets/demo.css',
      // 'https://cdn.bitespeed.co/snippets/custom-1.css',
    ];
  } else {
    return [
      // 'https://cdn.bitespeed.co/snippets/bitespeed-popup-min.css',
      // 'https://cdn.bitespeed.co/whatsapp-snippets/demo.css',
      // 'https://cdn.bitespeed.co/snippets/custom-1.css',
    ];
  }
};

const initPopupService = async () => {
  console.log(11111111);
  try {
    console.log("initPopupService");
    const browserService = await BrowserService.build({
      JSDependencies: getJSDependencies(),
      CSSDependencies: getCSSDependencies(),
    });
    const backendService = new BackendService({
      shopDomain: browserService.getShopDomain(),
      browserId: browserService.getBrowserId(),
    });
    globalBackendService = backendService;
    const popupJsons = await backendService.getStorePopups();
    const popupFactory = new PopupFactory(browserService, backendService);
    bitespeed_popups = popupFactory.getPopups(popupJsons);

    const popupPromises = [];

    for (const popupId in bitespeed_popups) {
      // Remove this later. This is only for testing chat widget popup.
      if (
        bitespeed_popups?.[popupId]?.popupType === "stw" ||
        bitespeed_popups?.[popupId]?.popupType === "chat widget" ||
        bitespeed_popups?.[popupId]?.popupType === "visual popup" ||
        bitespeed_popups?.[popupId]?.popupType === "webPush"
      ) {
        // console.log(popupId, "popupId")
        popupPromises.push(
          bitespeed_popups[popupId].addPopupTrigger().then((toShow) => {
            if (toShow) bitespeed_popups[popupId].show();

            if (bitespeed_popups[popupId]?.popupType === "visual popup")
              currentPopup = bitespeed_popups[popupId];
          }),
        );
      }
    }

    await Promise.allSettled(popupPromises);
  } catch (e) {
    console.error(`Error in Bitespeed Popups: ${e} ${e?.stack}`);
  } finally {
    const url = new URL(window.location.href);
    const contactIdBitespeed = url.searchParams.get("bspdCId");
    if (contactIdBitespeed) {
      console.log("setting bspdCId", contactIdBitespeed);
      setCookieGlobal("contactIdBitespeed", contactIdBitespeed, 1000, 1);
    }
  }
};

// Custom functions, these are to be called by unlayer buttons/links.
async function nextView(thisButton) {
  const popupId = thisButton.getAttribute("data-popupid");

  const iframe = document.getElementById(`popup-iframe-open-${popupId}`);
  const innerDoc = iframe.contentDocument || iframe.contentWindow.document;
  const country =
    innerDoc.getElementById("BiteSpeedDialCode")?.value ||
    innerDoc.getElementById("BiteSpeedWAChatSelect")?.value;
  const userInput = innerDoc.getElementById("BiteSpeedWAChatInput")?.value;
  const email = innerDoc.getElementById("STWBiteSpeedWAChatInputEmail")?.value;

  if (innerDoc.getElementById("BiteSpeedWAChatInput")) {
    if (!validatePhoneNumberBS(country, userInput)) {
      return;
    }
  }
  if (innerDoc.getElementById("STWBiteSpeedWAChatInputEmail")) {
    if (!validateEmail(email)) {
      return;
    }
  }

  const id = popupId;
  const thisPopup = bitespeed_popups[`${id}:bitespeed_popup`];

  // check discount type and make boolean getDiscount = true/false if discount type is unique/fixed
  const shouldGetDiscount =
    bitespeed_popups[`${id}:bitespeed_popup`]?.discountType?.includes(
      "Dynamic",
    ) || false;

  const requiredDiscount = shouldGetDiscount
    ? {
        Value: parseInt(thisPopup?.DiscountCodeValuePercentage),
        Type: bitespeed_popups[`${id}:bitespeed_popup`]?.discountType,
        Label: thisPopup?.DiscountCodeValuePercentage + "% OFF",
      }
    : {};

  const staticDiscount =
    shouldGetDiscount &&
    bitespeed_popups[`${id}:bitespeed_popup`]?.discountType.includes("Static")
      ? bitespeed_popups[`${id}:bitespeed_popup`]?.DiscountCode
      : -1;

  thisButton.innerHTML = "Please wait...";
  thisButton.disabled = true;
  thisButton.onclick = null;
  thisButton.backgroundColor = "grey";

  let discountCode;

  if (shouldGetDiscount) {
    const preLoadedDiscount = bitespeed_popups[
      `${id}:bitespeed_popup`
    ].browserService.getCookie(`${id}:discountCode`);

    if (preLoadedDiscount) {
      discountCode = preLoadedDiscount;
      bitespeed_popups[`${id}:bitespeed_popup`].nextView(discountCode);

      discountCodeObj = await bitespeed_popups[
        `${id}:bitespeed_popup`
      ].handleConversion(
        false,
        country,
        userInput,
        email,
        undefined,
        requiredDiscount,
        thisPopup.behaviour?.List?.selected,
        staticDiscount,
      );
    } else {
      discountCodeObj = await bitespeed_popups[
        `${id}:bitespeed_popup`
      ].handleConversion(
        true,
        country,
        userInput,
        email,
        undefined,
        requiredDiscount,
        thisPopup.behaviour?.List?.selected,
        staticDiscount,
      );

      discountCode = findDiscountCodeInResponse(discountCodeObj)?.[0]?.code;
      bitespeed_popups[`${id}:bitespeed_popup`].nextView(discountCode);
    }
  } else {
    discountCode = thisPopup.DiscountCode;
    bitespeed_popups[`${id}:bitespeed_popup`].nextView(discountCode);

    discountCodeObj = await bitespeed_popups[
      `${id}:bitespeed_popup`
    ].handleConversion(
      false,
      country,
      userInput,
      email,
      undefined,
      requiredDiscount,
      thisPopup.behaviour?.List?.selected,
      discountCode,
    );
  }

  const contactIdBitespeed =
    discountCodeObj?.results?.[1]?.value?.["id"] ||
    discountCodeObj?.results?.[1]?.["id"];
  bitespeed_popups[`${id}:bitespeed_popup`].browserService.setCookie(
    "contactIdBitespeed",
    contactIdBitespeed,
    1000,
  );
}

async function preloadDiscount() {
  const id = currentPopup.popupJson.id;
  const thisPopup = bitespeed_popups[`${id}:bitespeed_popup`];

  const existingPreLoadedDiscount = thisPopup.browserService.getCookie(
    `${id}:discountCode`,
  );
  if (existingPreLoadedDiscount) {
    return;
  }

  // check discount type and make boolean getDiscount = true/false if discount type is unique/fixed
  const shouldGetDiscount =
    bitespeed_popups[`${id}:bitespeed_popup`]?.discountType?.includes(
      "Dynamic",
    ) || false;

  if (shouldGetDiscount) {
    const requiredDiscount = shouldGetDiscount
      ? {
          Value: parseInt(currentPopup?.DiscountCodeValuePercentage),
          Type: bitespeed_popups[`${id}:bitespeed_popup`]?.discountType,
          Label: currentPopup?.DiscountCodeValuePercentage + "% OFF",
        }
      : {};

    await bitespeed_popups[`${id}:bitespeed_popup`].preloadDiscount(
      true,
      requiredDiscount,
    );
  }
}

function closePopup(thisButton) {
  const popupId = thisButton.getAttribute("data-popupid");
  // bitespeed_popups[`${popupId}:bitespeed_popup`].currentView = "OpenView";
  bitespeed_popups[`${popupId}:bitespeed_popup`].close();

  // if (document.getElementById(`popup-iframe-open-${popupId}`))
  //   document.getElementById(`popup-iframe-open-${popupId}`).style.left = "-1000%";
  // if (document.getElementById(`popup-iframe-completed-${popupId}`))
  //   document.getElementById(`popup-iframe-completed-${popupId}`).style.left = "-1000%";
}

function closePopupBitespeed(thisButton) {
  const popupId = thisButton.getAttribute("data-popupid");
  // bitespeed_popups[`${popupId}:bitespeed_popup`].currentView = "OpenView";
  bitespeed_popups[`${popupId}:bitespeed_popup`].close();

  // if (document.getElementById(`popup-iframe-open-${popupId}`))
  //   document.getElementById(`popup-iframe-open-${popupId}`).style.left = "-1000%";
  // if (document.getElementById(`popup-iframe-completed-${popupId}`))
  //   document.getElementById(`popup-iframe-completed-${popupId}`).style.left = "-1000%";
}

function findDiscountCodeInResponse(obj) {
  if (obj && obj.nodes) {
    return obj.nodes;
  }
  for (const key in obj) {
    if (typeof obj[key] === "object") {
      const result = findDiscountCodeInResponse(obj[key]);
      if (result) {
        return result;
      }
    }
  }
  return null;
}

function copyCodeSTW(e) {
  e.preventDefault();
  const iframe = document.getElementById("stw-popup-iframe");
  const innerDoc = iframe.contentDocument || iframe.contentWindow.document;

  const discountCodeDiv = innerDoc.getElementById("STWDicountBox");
  const codeText = discountCodeDiv?.innerHTML;

  const tempInput = document.createElement("input");
  tempInput.value = codeText;
  document.body.appendChild(tempInput);
  tempInput.select();
  document.execCommand("copy");
  document.body.removeChild(tempInput);

  copyElement = innerDoc.getElementById("STWDicountBoxCopy");
  copyElement.innerHTML = "Copied!";
  copyElement.style.color = "#4CAF50";
}

function copyCodeVisualPopup(e) {
  const popupId = e.target.dataset.popupid; // set during show() of the current popup

  const getDiscountCodeFromView = (view) => {
    let popupIframe;

    if (view === "OpenView") {
      popupIframe = document.getElementById(`popup-iframe-open-${popupId}`);
    } else {
      popupIframe = document.getElementById(
        `popup-iframe-completed-${popupId}`,
      );
    }

    if (!popupIframe) return;

    const innerDoc =
      popupIframe.contentDocument || popupIframe.contentWindow.document;
    const discountCodeDiv = innerDoc.getElementById("STWDicountBox");

    copyElement = innerDoc.getElementById("STWDicountBoxCopy");
    copyElement.innerHTML = "Copied!";
    copyElement.style.color = "#4CAF50";

    return discountCodeDiv?.innerHTML;
  };
  e.preventDefault();

  const codeText =
    getDiscountCodeFromView("OpenView") ||
    getDiscountCodeFromView("CompletedView");

  if (!codeText) return;

  const tempInput = document.createElement("input");
  tempInput.value = codeText;
  document.body.appendChild(tempInput);
  tempInput.select();
  document.execCommand("copy");
  document.body.removeChild(tempInput);
}

const getIframeBottomWidgetPreview = () => {
  const iframeBottom = document?.getElementById("chat-popup-iframe-bottom");
  const innerDocBottom =
    iframeBottom?.contentDocument || iframeBottom?.contentWindow.document;
  return innerDocBottom?.getElementById("WidgetPreview");
};

function expandBiteSpeedCW() {
  const iframeTop = document.getElementById("chat-popup-iframe");
  const iframeBottom = document.getElementById("chat-popup-iframe-bottom");
  const innerDocBottom =
    iframeBottom.contentDocument || iframeBottom.contentWindow.document;
  const toShow = iframeTop;
  const WaIcon = innerDocBottom.getElementById("iconWABiteSpeedCWBottom");
  const closeIcon = innerDocBottom.getElementById("iconCloseBiteSpeedCWBottom");
  const WaText = innerDocBottom.getElementById("WidgetPreview__text");
  if (!toShow || !WaIcon || !closeIcon) return;
  if (toShow.style.display === "block") {
    toShow.style.display = "none";
    WaIcon.style.display = "flex";
    closeIcon.style.display = "none";
    WaText.style.display = WaText?.dataset?.display || "flex";
    if (window.innerWidth < 600) {
      iframeBottom.style.display = "block";
    }
    const widgetPreview = getIframeBottomWidgetPreview();
    if (widgetPreview) {
      if (widgetPreview.dataset.width) {
        const widgetPreviewWidth = widgetPreview.dataset.width;
        widgetPreview.dataset.width = Math.ceil(
          iframeBottom.getBoundingClientRect().width,
        );
        iframeBottom.style.width = widgetPreviewWidth + "px";
        return;
      }
      iframeBottom.style.width =
        Math.ceil(widgetPreview.getBoundingClientRect().width) + "px";
    }
    return;
  }
  toShow.style.display = "block";
  WaIcon.style.display = "none";
  closeIcon.style.display = "flex";
  WaText.style.display = "none";
  const widgetPreview = getIframeBottomWidgetPreview();
  if (widgetPreview) {
    if (widgetPreview.dataset.width) {
      const widgetPreviewWidth = widgetPreview.dataset.width;
      widgetPreview.dataset.width = Math.ceil(
        iframeBottom.getBoundingClientRect().width,
      );
      iframeBottom.style.width = widgetPreviewWidth + "px";
      if (window.innerWidth < 600) {
        iframeBottom.style.display = "none";
      }
      return;
    }
    widgetPreview.dataset.width = Math.ceil(
      iframeBottom.getBoundingClientRect().width,
    );
    iframeBottom.style.width =
      Math.ceil(widgetPreview.getBoundingClientRect().width) + "px";
  }
  if (window.innerWidth < 600) {
    iframeBottom.style.display = "none";
  }
}

async function sendWAConversion(id, convertBeforeRedirect = true) {
  const iframeTop = document.getElementById("chat-popup-iframe");
  const innerDocTop =
    iframeTop.contentDocument || iframeTop.contentWindow.document;

  sendButtonWAWidget = innerDocTop.querySelector(".sendButtonWAWidget");

  const country = innerDocTop.getElementById("BiteSpeedWAChatSelect")?.value;
  const userInput = innerDocTop.getElementById("BiteSpeedWAChatInput")?.value;

  const thisPopup = bitespeed_popups[`${id}:bitespeed_popup`];

  const shouldGetDiscount = false;
  let initialText;

  if (!convertBeforeRedirect) {
    redirectToWhatsapp(thisPopup);
    return;
  }

  if (!validatePhoneNumberBS(country, userInput)) {
    return;
  } else {
    if (sendButtonWAWidget) {
      initialText = sendButtonWAWidget.innerHTML;
      sendButtonWAWidget.innerHTML = "Please wait...";
      sendButtonWAWidget.disabled = true;
      sendButtonWAWidget.onclick = null;
    }
    redirectToWhatsapp(thisPopup);
    const discountCodeObj = await thisPopup?.handleConversion?.(
      shouldGetDiscount,
      country,
      userInput,
      undefined,
      undefined,
      {},
      thisPopup?.popupJson?.unlayerJson?.General["Add Subscribers to list"]
        .selected,
      -1,
    );
    const contactIdBitespeed =
      discountCodeObj?.results?.[1]?.value?.["id"] ||
      discountCodeObj?.results?.[1]?.["id"];
    thisPopup.browserService.setCookie(
      "contactIdBitespeed",
      contactIdBitespeed,
      1000,
    );
    expandBiteSpeedCW();
    if (sendButtonWAWidget) {
      sendButtonWAWidget.innerHTML = initialText;
      sendButtonWAWidget.disabled = false;
      sendButtonWAWidget.onclick = () => {
        sendWAConversion(id);
      };
    }
  }
}

function redirectToWhatsapp(thisPopup) {
  if (window.innerWidth < 768) {
    window.open(
      "https://api.whatsapp.com/send?phone=" +
        thisPopup?.popupJson?.unlayerJson?.General[
          "Support Number"
        ].selected?.replace("+", "") +
        thisPopup?.popupJson?.unlayerJson?.General[
          "Support Number"
        ].attributes.replace(" ", "") +
        "&text=" +
        encodeURIComponent(window.location.href) +
        "%0A" +
        encodeURIComponent(
          thisPopup?.popupJson?.unlayerJson?.WidgetContent?.["Default text"]
            ?.selected || "Hello",
        ),
    );
  } else {
    window.open(
      "https://web.whatsapp.com/send?phone=" +
        thisPopup?.popupJson?.unlayerJson?.General[
          "Support Number"
        ].selected?.replace("+", "") +
        thisPopup?.popupJson?.unlayerJson?.General[
          "Support Number"
        ].attributes.replace(" ", "") +
        "&text=" +
        encodeURIComponent(window.location.href.split("?")[0]) +
        "%0A" +
        encodeURIComponent(
          thisPopup?.popupJson?.unlayerJson?.WidgetContent?.["Default text"]
            ?.selected || "hello",
        ),
    );
  }
}

// STW FUNCTIONS
function movePositionUp() {
  if (window.innerWidth > 768) return;
  const iframe = document.getElementById("stw-popup-iframe");
  const innerDoc = iframe.contentDocument || iframe.contentWindow.document;
  const spinnerPin = innerDoc.getElementById("spinnerPin");
  spinnerPin.style.display = "none";
}

function movePositionDown() {
  if (window.innerWidth > 768) return;
  const iframe = document.getElementById("stw-popup-iframe");
  const innerDoc = iframe.contentDocument || iframe.contentWindow.document;
  const spinnerPin = innerDoc.getElementById("spinnerPin");
  spinnerPin.style.display = "block";
}

function getRotationDegrees(element) {
  const style = window.getComputedStyle(element);
  const matrix = new WebKitCSSMatrix(style.webkitTransform);
  return Math.round(Math.atan2(matrix.b, matrix.a) * (180 / Math.PI));
}

function closeBSSTW(id) {
  const iframe = document.getElementById("stw-popup-iframe");
  const innerDoc = iframe.contentDocument || iframe.contentWindow.document;
  const wheelContainerBiteSpeed = innerDoc.getElementById(
    "wheelContainerBiteSpeed",
  );
  wheelContainerBiteSpeed.style.left = "-100%";
  setTimeout(() => {
    wheelContainerBiteSpeed.style.display = "none";
    iframe.style.display = "none";
  }, 1000);
}

const spin_IT_old = function (transitionTime) {
  const main_spin_plate = document.getElementById("container_stw_aj");
  const btn_Spinner = document.getElementById("bitespeed-spin");
  const number_rotationDegree = Math.ceil(Math.random() * 1000) + 5000;

  if (btn_Spinner && main_spin_plate) {
    main_spin_plate.style.transform =
      "rotate(" + number_rotationDegree + "deg)";
  }
  setTimeout(
    () => {
      nextView();
    },
    transitionTime * 1000 + 1000,
  );
};

function spin_IT(popupId, transitionTime = 5) {
  const iframe = document.getElementById("stw-popup-iframe");
  const innerDoc = iframe.contentDocument || iframe.contentWindow.document;
  const isMobile = window.matchMedia("(max-width: 450px)").matches;
  const wheelAndInputContainer = innerDoc.getElementById(
    "wheelAndInputContainer",
  );
  const gapDivSTW = innerDoc.getElementById("gapDivSTW");
  const STWsendButtonWAWidgetContainer = innerDoc.getElementById(
    "STWsendButtonWAWidgetContainer",
  );

  const spinnerPin = innerDoc.getElementById("spinnerPin");
  const STWinputWAWidget = innerDoc.getElementById("STWinputWAWidget");
  const STWemailWAWidget = innerDoc.getElementById("STWemailWAWidget");
  const STWnameWAWidget = innerDoc.getElementById("STWnameWAWidget");
  const STWSubHeadingText = innerDoc.getElementById("STWSubHeadingText");
  const STWHeadingText = innerDoc.getElementById("STWHeadingText");
  const STWDicountBoxContainer = innerDoc.getElementById("STWdiscountWAWidget");
  const STWDicountBox = innerDoc.getElementById("STWDicountBox");
  const copyCodeButtonSTW = innerDoc.getElementById("copyCodeButtonSTW");
  const STWDisclaimerText = innerDoc.getElementById("STWDisclaimerText");

  const country = innerDoc.getElementById("STWBiteSpeedWAChatSelect")?.value;
  const phone = innerDoc.getElementById("STWBiteSpeedWAChatInput")?.value;
  const email = innerDoc.getElementById("STWBiteSpeedWAChatInputEmail")?.value;

  if (!validatePhoneNumberBS(country, phone)) {
    return;
  }

  if (email && !validateEmail(email)) {
    return;
  }

  if (!isMobile) {
    wheelAndInputContainer.style.left = "10%";
    gapDivSTW.style.flex = "0 0 25%";
  } else {
    wheelAndInputContainer.style.top = "50%";
    gapDivSTW.style.paddingTop = "40vh";
  }

  const thisPopup = bitespeed_popups[`${popupId}:bitespeed_popup`];
  const selectedPie = thisPopup?.popupJson?.selectedPie;
  const selectedPieSettings =
    thisPopup?.popupJson?.unlayerJson?.values?.PlateSettings[selectedPie];

  const shouldGetDiscount =
    selectedPieSettings?.type === "Winning" &&
    selectedPieSettings?.couponType !== "Static";

  desiredPie = selectedPie;
  desiredDegree = 360 - (desiredPie?.split("pie")?.[1] - 1) * 36 + 72;
  const main_spin_plate = innerDoc.getElementById("container_stw_aj");
  if (main_spin_plate) {
    const currentDegree = getRotationDegrees(main_spin_plate);
    let diff = desiredDegree - currentDegree;
    diff = diff + 360 * 10;
    main_spin_plate.style.transform =
      "rotate(" + (currentDegree + diff) + "deg)";

    sendSTWConversion(popupId);

    function waitForTimeout() {
      return new Promise((resolve) => {
        setTimeout(
          () => {
            resolve();
          },
          transitionTime * 1000 - 1233,
        );
      });
    }

    waitForTimeout().then(() => {
      // Hide Add Inputs and Send Button
      if (STWinputWAWidget) STWinputWAWidget.style.display = "none";
      if (STWemailWAWidget) STWemailWAWidget.style.display = "none";
      if (STWnameWAWidget) STWnameWAWidget.style.display = "none";
      if (STWDisclaimerText) STWDisclaimerText.style.display = "none";
      if (STWsendButtonWAWidgetContainer)
        STWsendButtonWAWidgetContainer.style.display = "none";
      if (copyCodeButtonSTW) copyCodeButtonSTW.style.display = "flex";

      // Show Temporary Text
      if (STWHeadingText)
        STWHeadingText.innerHTML =
          selectedPieSettings?.type === "Winning"
            ? `${thisPopup?.popupJson?.unlayerJson?.CompletedView?.["Success Message Heading"].selected} ${selectedPieSettings.label}`
            : thisPopup?.popupJson?.unlayerJson?.CompletedView?.[
                "Failure Message Heading"
              ].selected;

      if (STWSubHeadingText)
        STWSubHeadingText.innerHTML =
          selectedPieSettings.type === "Winning"
            ? thisPopup?.popupJson?.unlayerJson?.CompletedView?.[
                "Success Message Subheading"
              ].selected
            : thisPopup?.popupJson?.unlayerJson?.CompletedView?.[
                "Failure Message Subheading"
              ].selected;

      if (STWDicountBoxContainer) {
        STWDicountBoxContainer.style.display =
          selectedPieSettings?.type === "Winning" ? "flex" : "none";
        STWDicountBox.style.boxShadow = "none";
      }
      if (!isMobile) {
        wheelAndInputContainer.style.left = "-35%";
        gapDivSTW.style.flex = "0 0 0%";
      } else {
        wheelAndInputContainer.style.top = "15%";
        gapDivSTW.style.paddingTop = "0vh";
        // gapDivSTW.style.flex = "0 0 0%";
      }
    });
  }
}

// Helper function to get rotation degree of an element
function getRotationDegrees(element) {
  const style = window.getComputedStyle(element);
  const matrix = new WebKitCSSMatrix(style.webkitTransform);
  return Math.round(Math.atan2(matrix.b, matrix.a) * (180 / Math.PI));
}

function validatePhoneNumberBS(countryCode, phoneNumber) {
  let regexPattern;

  if (countryCode === "+91") {
    regexPattern = /^\d{10}$/;
  } else {
    regexPattern = /^\d{7,12}$/;
  }

  if (regexPattern && regexPattern.test(phoneNumber)) {
    return true;
  } else {
    console.log("Invalid phone number format");
    return false;
  }
}

function validateEmail(email) {
  const tester =
    /^[-!#$%&'*+\/0-9=?A-Z^_a-z`{|}~](\.?[-!#$%&'*+\/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-*\.?[a-zA-Z0-9])*\.[a-zA-Z](-?[a-zA-Z0-9])+$/;
  if (!email) return false;

  const emailParts = email.split("@");

  if (emailParts.length !== 2) return false;

  const account = emailParts[0];
  const address = emailParts[1];

  if (account.length > 64) return false;
  else if (address.length > 255) return false;

  const domainParts = address.split(".");

  if (
    domainParts.some(function (part) {
      return part.length > 63;
    })
  )
    return false;

  const isValid = tester.test(email);
  if (!isValid) console.log("Invalid email format");
  return isValid;
}

// function validateEmailBS(email) {
//   const regexPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
//   if (regexPattern.test(email)) {
//     return true;
//   } else {
//     console.log("Invalid email format");
//     return false;
//   }
// }

function postRenderOperations(popupId) {
  const iframe = document.getElementById("stw-popup-iframe");
  if (iframe) {
    const innerDoc = iframe.contentDocument || iframe.contentWindow.document;
    if (iframe && innerDoc) {
      const countryCodeBoxSTW = innerDoc.getElementById(
        "STWBiteSpeedWAChatSelect",
      );

      if (
        countryCodeBoxSTW &&
        countryCodeBitespeed &&
        countryCodeBitespeed !== ""
      ) {
        countryCodeBoxSTW.value = `+${countryCodeBitespeed}`;
      }
    }
  }
  const CWIframe = document.getElementById("chat-popup-iframe");
  if (CWIframe) {
    const innerDoc =
      CWIframe.contentDocument || CWIframe.contentWindow.document;
    if (CWIframe && innerDoc) {
      const countryCodeBox = innerDoc.getElementById("BiteSpeedWAChatSelect");
      if (
        countryCodeBox &&
        countryCodeBitespeed &&
        countryCodeBitespeed !== ""
      ) {
        countryCodeBox.value = `+${countryCodeBitespeed}`;
      }
    }
  }
  const VPOpenIframe = document.getElementById(`popup-iframe-open-${popupId}`);
  if (VPOpenIframe) {
    const innerDoc =
      VPOpenIframe.contentDocument || VPOpenIframe.contentWindow.document;
    if (VPOpenIframe && innerDoc) {
      const countryCodeBox = innerDoc.getElementById("BiteSpeedWAChatSelect");
      if (
        countryCodeBox &&
        countryCodeBitespeed &&
        countryCodeBitespeed !== ""
      ) {
        countryCodeBox.value = `+${countryCodeBitespeed}`;
      }
    }

    // Set the width of the select element to the width of the selected option
    const selectElement = innerDoc.getElementById("BiteSpeedDialCode");
    console.log("%c { selectElement }", "color: #00e600;", selectElement);
    if (selectElement) {
      selectElement.addEventListener("change", function () {
        // Create a temporary span element and append it to the body
        const tempSpan = innerDoc.createElement("span");
        tempSpan.style.visibility = "hidden"; // Hide the element
        tempSpan.style.whiteSpace = "nowrap"; // Prevent wrapping
        innerDoc.body.appendChild(tempSpan);
        // Set the text of the span to the selected option's text
        tempSpan.textContent =
          selectElement.options[selectElement.selectedIndex].text;
        // Measure the width of the span
        const tempWidth = tempSpan.offsetWidth;
        // Remove the temporary span from the body
        innerDoc.body.removeChild(tempSpan);
        // Set the width of the select element to the width of the temporary span + a little extra padding
        selectElement.style.width = `${tempWidth + 30}px`; // +6 for padding, adjust as necessary
      });
      // Trigger the change event on page load to set initial width
      selectElement.dispatchEvent(new Event("change"));
    }
  }
  const VPCompletedIframe = document.getElementById(
    `popup-iframe-completed-${popupId}`,
  );
  if (VPCompletedIframe) {
    const innerDoc =
      VPCompletedIframe.contentDocument ||
      VPCompletedIframe.contentWindow.document;
    if (VPCompletedIframe && innerDoc) {
      const countryCodeBox = innerDoc.getElementById("BiteSpeedWAChatSelect");
      if (
        countryCodeBox &&
        countryCodeBitespeed &&
        countryCodeBitespeed !== ""
      ) {
        countryCodeBox.value = `+${countryCodeBitespeed}`;
      }
    }
  }
}

async function sendSTWConversion(id) {
  const iframe = document.getElementById("stw-popup-iframe");
  const innerDoc = iframe.contentDocument || iframe.contentWindow.document;
  const country = innerDoc.getElementById("STWBiteSpeedWAChatSelect")?.value;
  const phone = innerDoc.getElementById("STWBiteSpeedWAChatInput")?.value;
  const email = innerDoc.getElementById("STWBiteSpeedWAChatInputEmail")?.value;
  const name = innerDoc.getElementById("STWBiteSpeedWAChatInputName")?.value;
  const STWDicountBox = innerDoc.getElementById("STWDicountBox");

  const thisPopup = bitespeed_popups[`${id}:bitespeed_popup`];
  const selectedPieSettings =
    thisPopup?.popupJson?.unlayerJson?.values?.PlateSettings[
      thisPopup?.popupJson?.selectedPie
    ];
  const shouldGetDiscount =
    selectedPieSettings?.type === "Winning" &&
    selectedPieSettings?.couponType !== "Static";

  const requiredDiscount = shouldGetDiscount
    ? {
        Value: selectedPieSettings.value,
        Type: selectedPieSettings.couponType,
        Label: selectedPieSettings.label,
      }
    : {};

  const staticDiscount =
    selectedPieSettings?.type === "Winning" &&
    selectedPieSettings?.couponType === "Static"
      ? selectedPieSettings?.coupon
      : -1;

  const discountCodeObj = await thisPopup?.handleConversion?.(
    shouldGetDiscount,
    country,
    phone,
    email,
    name,
    requiredDiscount,
    thisPopup?.popupJson?.unlayerJson?.ContentSettings?.[
      "Add Subscribers to list"
    ].selected,
    staticDiscount,
  );

  let discountCode = findDiscountCodeInResponse(discountCodeObj)?.[0]?.code;
  const newBrowserId = discountCodeObj?.results?.[1]?.value?.browserId?.[0];
  thisPopup.browserService.setBrowserId(newBrowserId);

  const contactIdBitespeed =
    discountCodeObj?.results?.[1]?.value?.["id"] ||
    discountCodeObj?.results?.[1]?.["id"];
  thisPopup.browserService.setCookie(
    "contactIdBitespeed",
    contactIdBitespeed,
    1000,
  );

  STWDicountBox.innerHTML = shouldGetDiscount
    ? discountCode
    : selectedPieSettings?.coupon;
}

const getCookieGlobal = (cookie) => {
  const cookieJson = {};
  document.cookie.split(";").forEach((el) => {
    const [k, v] = el.split("=");
    cookieJson[k.trim()] = v;
  });
  return cookieJson[cookie];
};
const setCookieGlobal = (cookie, value, days, hours) => {
  let expires = "";
  if (days) {
    const date = new Date();
    date.setTime(date.getTime() + days * hours * 60 * 60 * 1000);
    expires = "; expires=" + date.toUTCString();
  }
  document.cookie = cookie + "=" + (value || "") + expires + "; path=/";
};

(async function () {
  console.log("Bitespeed Popup Service");
  loadScript("https://unpkg.com/axios/dist/axios.min.js", async () => {
    let isMultichannel;
    console.log("isMultichannel start");
    if (!getCookieGlobal("isMultiChannel")) {
      try {
        const multichannelPromise = await getIsMultichannel();

        const timeoutPromise = new Promise((resolve) => {
          setTimeout(() => resolve(true), 6000);
        });

        isMultichannel = await Promise.race([
          multichannelPromise,
          timeoutPromise,
        ]);
      } catch (error) {
        isMultichannel = true;
      }

      setCookieGlobal("isMultiChannel", isMultichannel, 1, 1);
    } else if (
      getCookieGlobal("isMultiChannel") == "false" ||
      getCookieGlobal("isMultiChannel") == false
    ) {
      isMultichannel = false;
    } else if (
      getCookieGlobal("isMultiChannel") == "true" ||
      getCookieGlobal("isMultiChannel") == true
    ) {
      isMultichannel = true;
    }
    if (isMultichannel || isMultichannel == undefined) {
      // isMultichannel == undefined is to falback to multichannel if cookie is not set
      initPopupService();
      return;
    }
    console.log("isMultichannel end");
    const isFb = await getIsFb();
    const script = pickScript(isFb);
    script();
  });
})();
